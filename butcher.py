import numpy
def tableau(method_name):
   #
   # Returns the butcher table associated with the method given by the input
   # argument 'method_name'.  We compute the internal stage times (root nodes)
   # c, the Butcher matrix A, the method coefficients b, and the order
   # of accuracy for the method q.   The output table has the block structure
   #     B = [c, A; q, b]
   # for a standard Runge-Kutta method.
   #
   # If the method has an embedded error indicator, we also compute the embedded
   # method's coefficients b2 and order of accuracy p, and provide the output
   #     B = [c, A; q, b; p, b2]
   #
   # Method types are specified by the abbreviations:
   #       ERK - explicit Runge Kutta (strictly lower-triangular A)
   #       IRK - implicit Runge Kutta (dense A)
   #      DIRK - diagonally-implicit Runge Kutta (lower-triangular A)
   #     SDIRK - singly-diagonally implicit Runge Kutta (DIRK with fixed diagonal)
   #    ESDIRK - SDIRK method with an initial explicit stage
   #
   # Allowed methods are listed below.  They are grouped by category
   # (ERK, DIRK, IRK) and subcategory (non-embedded vs embedded).
   # Each method lists:
   # - the number of stages (s)
   # - the order of accuracy of the stages (qs)  (implicit methods
   #   only, since explicit method stage accuracy is limited to 1)
   # - the order of accuracy of the method (q)
   # - the linear order of the method (lq) -- i.e. the order of
   #   accuracy when the IVP RHS f(t,y) depends linearly on y
   # - A,B,L-stability of the method (implicit methods only)
   #
   # Additionally, if the method contains an embedding, the table
   # below also lists:
   # - the embedding order of accuracy (p)
   # - the embedding linear order of accuracy (lp)
   # - A,B,L-stability of the embedding (implicit methods only)
   #
   # For each method, the reported values of {q,p,qs,lq,lp} correspond
   # to satisfaction of the order conditions for a loose tolerance of
   # 1e-8.  For each method, we additionally report the tightest
   # tolerance where these order conditions are still satisfied (to a
   # minimum of 1e-40).
   #
   # Since Butcher's simplifying assumptions correspond to sufficient
   # (but not necessary) conditions for order of accuracy, we may
   # report an accuracy of 6 when in fact the method has higher
   # order. Methods where we report 6 but have higher published order
   # are marked with "+".
   #
   # However, since we analytically assess the *necessary* order
   # conditions up to 6, any method with published accuracy <= 6 that
   # does NOT attain this published order is marked with "-".
   #
   # Explicit, non-embedded methods:
   #
   #             Name             |  s |  q  lq  |  tol
   #   --------------------------------------------------
   #                     ERK-1-1  |  1 |  1   1  | 1e-40
   #                     ERK-2-2  |  2 |  2   2  | 1e-40
   #             SSP2(2,2,2)-ERK  |  2 |  2   2  | 1e-40
   #           Ascher(2,3,2)-ERK  |  3 |  2   3  | 1e-40
   #              ARK(2,3,2)-ERK  |  3 |  2   3  | 1e-40
   #           Ascher(2,2,2)-ERK  |  3 |  2   2  | 1e-40
   #        SSP2(3,3,2)-lpm1-ERK  |  3 |  2   2  | 1e-40
   #        SSP2(3,3,2)-lpm2-ERK  |  3 |  2   2  | 1e-40
   #        SSP2(3,3,2)-lpum-ERK  |  3 |  2   2  | 1e-40
   #       SSP2(3,3,2)-lspum-ERK  |  3 |  2   2  | 1e-40
   #           SSP2(3,3,2)-a-ERK  |  3 |  2   2  | 1e-40
   #           SSP2(3,3,2)-b-ERK  |  3 |  2   2  | 1e-40
   #           Ascher(2,3,3)-ERK  |  3 |  3   3  | 1e-40
   #             Knoth-Wolke-ERK  |  3 |  3   3  | 1e-40
   #             SSP3(3,3,2)-ERK  |  3 |  3   3  | 1e-40
   #             SSP3(3,3,3)-ERK  |  3 |  3   3  | 1e-40
   #    SSPRK(3,3)-Shu-Osher-ERK  |  3 |  3   3  | 1e-40
   #           Ascher(3,4,3)-ERK  |  4 |  3   4  | 1e-17
   #                 Cooper4-ERK  |  4 |  3   3  | 1e-40
   #             SSP3(4,3,3)-ERK  |  4 |  3   3  | 1e-40
   #           Ascher(4,4,3)-ERK  |  5 |  3   3  | 1e-40
   #                 DBM-5-3-ERK  |  5 |  3   3  | 1e-15
   #                3/8-Rule-ERK  |  4 |  4   4  | 1e-40
   #                     ERK-4-4  |  4 |  4   4  | 1e-40
   #                 Cooper6-ERK  |  6 |  4-  4  | 1e-40
   #             Butcher-7-6-ERK  |  7 |  6   6  | 1e-40
   #            Butcher-7-6b-ERK  |  7 |  6   6  | 1e-40
   #             Butcher-9-7-ERK  |  9 |  6+  7  | 1e-40
   #       CooperVerner-11-8-ERK  | 11 |  6+  8  | 1e-14
   #
   #
   # Explicit, embedded methods:
   #
   #                              |    |  Method |  Embedding  |
   #             Name             |  s |  q  lq  |  p  lp      | tol
   #   -----------------------------------------------------------------
   #              Heun-Euler-ERK  |  2 |  2   2  |  1   1       | 1e-40
   #                     ERK-3-3  |  3 |  3   3  |  2   2       | 1e-40
   #          ARK3(2)4L[2]SA-ERK  |  4 |  3   3  |  2   2       | 1e-25
   #        Bogacki-Shampine-ERK  |  4 |  3   3  |  2   2       | 1e-40
   #              Merson-4-3-ERK  |  5 |  4   4  |  3   5       | 1e-40
   #           Zonneveld-4-3-ERK  |  5 |  4   4  |  3   3       | 1e-40
   #          ARK4(3)6L[2]SA-ERK  |  6 |  4   4  |  3   3       | 1e-25
   #        Sayfy-Aburub-4-3-ERK  |  6 |  4   4  |  3   3       | 1e-40
   #          ARK4(3)7L[2]SA-ERK  |  7 |  4   4  |  3   3       | 1e-25
   #                Fehlberg-ERK  |  6 |  5   5  |  4   4       | 1e-40
   #               Cash-Karp-ERK  |  6 |  5   5  |  4   4       | 1e-40
   #          Dormand-Prince-ERK  |  7 |  5   5  |  4   4       | 1e-40
   #          ARK5(4)8L[2]SA-ERK  |  8 |  5   5  |  4   4       | 1e-25
   #         ARK5(4)8L[2]SAb-ERK  |  8 |  5   5  |  4   4       | 1e-25
   #              Verner-6-5-ERK  |  8 |  6   6  |  5   5       | 1e-40
   #            Fehlberg-8-7-ERK  | 13 |  6+  8  |  6+  7       | 1e-40
   #
   #
   # Diagonally-implicit, non-embedded methods:
   #
   #             Name             |  s |  q  lq   A   B   L  |  qs  tol
   #   ------------------------------------------------------------------
   #           SSP2(2,2,2)-SDIRK  |  2 |  2   2   Y   Y   Y  |  1  1e-40
   #                   SDIRK-2-2  |  2 |  2   2   Y       Y  |  1  1e-40
   #         Ascher(2,3,2)-SDIRK  |  3 |  2   2   Y       Y  |  1  1e-40
   #         Ascher(2,2,2)-SDIRK  |  3 |  2   2   Y       Y  |  1  1e-40
   #            ARK(2,3,2)-SDIRK  |  3 |  2   2   Y       Y  |  2  1e-40
   #      SSP2(3,3,2)-lpm1-SDIRK  |  3 |  2   2   Y       Y  |  1  1e-40
   #      SSP2(3,3,2)-lpm2-SDIRK  |  3 |  2   2   Y       Y  |  1  1e-40
   #      SSP2(3,3,2)-lpum-SDIRK  |  3 |  2   2   Y       Y  |  1  1e-40
   #     SSP2(3,3,2)-lspum-SDIRK  |  3 |  2   2   Y       Y  |  1  1e-40
   #          SSP2(3,3,2)-a-DIRK  |  3 |  2   2   Y       Y  |  1  1e-40
   #          SSP2(3,3,2)-b-DIRK  |  3 |  2   2   Y       Y  |  1  1e-40
   #           SSP3(3,3,2)-SDIRK  |  3 |  2   2   Y       Y  |  1  1e-40
   #         Ascher(2,3,3)-SDIRK  |  3 |  3   3   Y   Y      |  1  1e-40
   #          SSP3(3,3,3)-ESDIRK  |  3 |  3   3              |  1  1e-40
   #                   EDIRK-3-3  |  3 |  3   3   Y          |  1  1e-40
   #                  ESDIRK-3-3  |  3 |  3   3   Y          |  1  1e-40
   #           SSP3(4,3,3)-SDIRK  |  4 |  3   3   Y          |  1  1e-14
   #         Ascher(3,4,3)-SDIRK  |  4 |  3   3   Y       Y  |  1  1e-17
   #         Ascher(4,4,3)-SDIRK  |  4 |  3   3   Y       Y  |  1  1e-40
   #              Cooper4-ESDIRK  |  4 |  3   3   Y          |  1  1e-40
   #              DBM-5-3-ESDIRK  |  5 |  3   3   Y       Y  |  1  1e-16
   #              Cooper6-ESDIRK  |  6 |  4-  4   Y          |  1  1e-40
   #
   #
   # Diagonally-implicit, embedded methods:
   #
   #                              |    |       Method        |      Embedding      |
   #             Name             |  s |  q  lq   A   B   L  |  p  lp   A   B   L  |  qs  tol
   #   ----------------------------------------------------------------------------------------
   #                   SDIRK-2-1  |  2 |  2   2   Y   Y      |  1   1   Y   Y   Y  |  1  1e-40
   #               TRBDF2-ESDIRK  |  3 |  2   2   Y       Y  |  3   3              |  2  1e-40
   #                 TRX2-ESDIRK  |  3 |  2   2   Y          |  3   3              |  2  1e-40
   #            Billington-SDIRK  |  3 |  2   2   Y          |  3   3              |  1  1e-11
   #       ARK3(2)4L[2]SA-ESDIRK  |  4 |  3   3   Y       Y  |  2   2   Y          |  2  1e-25
   #       Kvaerno(4,2,3)-ESDIRK  |  4 |  3   3   Y          |  2   2   Y          |  2  1e-14
   #           ESDIRK3(2)5L[2]SA  |  5 |  3   3   Y       Y  |  2   2   Y       Y  |  2  1e-25
   #          ESDIRK3(2I)5L[2]SA  |  5 |  3   3   Y       Y  |  2   2   Y       Y  |  2  1e-40
   #                   SDIRK-5-4  |  5 |  4   4   Y       Y  |  3   3           Y  |  1  1e-40
   #           Cash(5,3,4)-SDIRK  |  5 |  4   4   Y       Y  |  3   3   Y          |  1  1e-10
   #       Kvaerno(5,3,4)-ESDIRK  |  5 |  4   4   Y          |  3   3   Y          |  2  1e-14
   #           Cash(5,2,4)-SDIRK  |  5 |  4   4   Y       Y  |  2   2   Y          |  1  1e-10
   #           ESDIRK4(3)6L[2]SA  |  6 |  4   4   Y       Y  |  3   3   Y       Y  |  2  1e-26
   #          ESDIRK4(3I)6L[2]SA  |  6 |  4   4   Y       Y  |  3   3   Y       Y  |  2  1e-25
   #          QESDIRK4(3)6L[2]SA  |  6 |  4   4   Y       Y  |  3   3   Y       Y  |  2  1e-25
   #       ARK4(3)6L[2]SA-ESDIRK  |  6 |  4   4   Y       Y  |  3   3   Y          |  2  1e-40
   #       ARK4(3)7L[2]SA-ESDIRK  |  7 |  4   4   Y       Y  |  3   3   Y       Y  |  2  1e-25
   #           ESDIRK5(3)6L[2]SA  |  6 |  5   5   Y       Y  |  3   3   Y       Y  |  2  1e-25
   #           ESDIRK5(4)7L[2]SA  |  7 |  5   5   Y       Y  |  4   4   Y       Y  |  2  1e-26
   #       ARK5(4)8L[2]SA-ESDIRK  |  8 |  5   5   Y       Y  |  4   4   Y          |  2  1e-25
   #      ARK5(4)8L[2]SAb-ESDIRK  |  8 |  5   5   Y       Y  |  4   4   Y          |  2  1e-25
   #       Kvaerno(7,4,5)-ESDIRK  |  7 |  5   5   Y       Y  |  4   4   Y          |  2  1e-15
   #
   #
   # Fully-implicit, non-embedded methods:
   #
   #             Name             |  s |  q  lq   A   B   L  |  qs  tol
   #   --------------------------------------------------------------------
   #                     IRK-1-1  |  1 |  1   1   Y   Y   Y  |  1  1e-40
   #         LobattoIIIC-2-2-IRK  |  2 |  2   2   Y   Y   Y  |  1  1e-40
   #      Crank-Nicolson-2-2-IRK  |  2 |  2   2   Y          |  2  1e-40
   #                    SIRK-2-2  |  2 |  2   2   Y       Y  |  2  1e-40
   #         LobattoIIIA-2-2-IRK  |  2 |  2   2   Y          |  2  1e-40
   #          LobattoIII-2-2-IRK  |  2 |  2   2              |  1  1e-40
   #            RadauIIA-2-3-IRK  |  2 |  3   3   Y   Y   Y  |  2  1e-40
   #               Gauss-2-4-IRK  |  2 |  4   4   Y   Y      |  2  1e-40
   #         LobattoIIIC-3-4-IRK  |  3 |  4   4   Y   Y   Y  |  2  1e-40
   #         LobattoIIIA-3-4-IRK  |  3 |  4   4   Y          |  3  1e-40
   #         LobattoIIIB-3-4-IRK  |  3 |  4   4   Y          |  1  1e-40
   #          LobattoIII-3-4-IRK  |  3 |  4   4              |  2  1e-40
   #             RadauIA-3-5-IRK  |  3 |  5   5   Y   Y   Y  |  2  1e-40
   #            RadauIIA-3-5-IRK  |  3 |  5   5   Y   Y   Y  |  3  1e-40
   #              RadauI-3-5-IRK  |  3 |  5   5              |  3  1e-40
   #             RadauII-3-5-IRK  |  3 |  5   5              |  2  1e-40
   #               Gauss-3-6-IRK  |  3 |  6   6   Y   Y      |  3  1e-40
   #         LobattoIIIC-4-6-IRK  |  4 |  6   6   Y   Y   Y  |  3  1e-40
   #         LobattoIIIA-4-6-IRK  |  4 |  6   6   Y          |  4  1e-40
   #         LobattoIIIB-4-6-IRK  |  4 |  6   6   Y          |  2  1e-40
   #          LobattoIII-4-6-IRK  |  4 |  6   6              |  3  1e-40
   #         LobattoIIIC-5-8-IRK  |  5 |  8   8   Y   Y   Y  |  4  1e-40
   #         LobattoIIIA-5-8-IRK  |  5 |  8   8   Y          |  5  1e-40
   #         LobattoIIIB-5-8-IRK  |  5 |  8   8   Y          |  3  1e-40
   #          LobattoIII-5-8-IRK  |  5 |  8   8              |  4  1e-40
   #            RadauIIA-5-9-IRK  |  5 |  9   8   Y   Y   Y  |  5  1e-15
   #              Gauss-6-12-IRK  |  6 | 12   8   Y   Y      |  6  1e-16
   #

   # set anonymous function to handle behavior of double-vs-symbolic output
#   if ~exist('symbolic','var')
#      symbolic = false
#   end
#   if (symbolic)
#      v = @(x) sym(x)
#   else
#      v = @(x) double(x)
#   end
#
#   z = v(0)
#
   # set the butcher table
#   if method_name == 'DBM-5-3-ERK':
#      c = [z; v(0.1030620881159184); v(0.72139131281753662); v(1.28181117351981733); v(1) ]
#      b = [ v(0.87795339639076672), v(-0.72692641526151549), v(0.7520413715737272), ...
#            v(-0.22898029400415090), v(0.32591194130117246) ]
#      A = [ z, z, z, z, z
#            v(0.10306208811591838), z, z, z, z
#            v(-0.94124866143519894), v(1.6626399742527356),  z, z, z
#            v(-1.3670975201437765),  v(1.3815852911016873),  v(1.2673234025619065),  z, z
#            v(-0.81287582068772448), v(0.81223739060505738), v(0.90644429603699305), ...
#               v(0.094194134045674111), z ]
#      q = 3
#      B = [c, A; q, b]
#
#   elif method_name == 'DBM-5-3-ESDIRK':
#      c = [z; v(0.1030620881159184); v(0.72139131281753662); v(1.28181117351981733); v(1) ]
#      b = [ v(0.87795339639076672), v(-0.72692641526151549), v(0.7520413715737272), ...
#            v(-0.22898029400415090), v(0.32591194130117246) ]
#      A = [ z, z, z, z, z
#            v(-0.22284985318525410),  v(0.32591194130117247), z, z, z
#            v(-0.46801347074080545),  v(0.86349284225716961), v(0.32591194130117247),  z, z
#            v(-0.46509906651927421),  v(0.81063103116959553), v(0.61036726756832357),  v(0.32591194130117245), z
#            v(0.87795339639076675), v(-0.72692641526151547), v(0.75204137157372720), ...
#               v(-0.22898029400415088), v(0.32591194130117247) ]
#      q = 3
#      B = [c, A; q, b]
#
   if method_name == 'ARK3(2)4L[2]SA-ERK':

      c = numpy.array([0., 1767732205903/2027836641118, 3/5, 1])
      b = numpy.array([1471266399579/7840856788654, -4482444167858/7529755066697, 11266239266428/11593286722821, 1767732205903/4055673282236])
      b2 = numpy.array([2756255671327/12835298489170, -10771552573575/22201958757719, 9247589265047/10645013368117, 2193209047091/5459859503100])
      A = numpy.array([[0., 0., 0., 0.], \
                        [1767732205903/2027836641118, 0., 0., 0.], \
                        [5535828885825/10492691773637, 788022342437/10882634858940, 0., 0.], \
                        [6485989280629/16251701735622, -4246266847089/9704473918619, 10755448449292/10357097424841, 0.]])
      q = 3
      p = 2
      B = {
         "c": c,
         "A" : A,
         "q" : q,
         "b" : b,
         "p" : p,
         "b2": b2
         }

   elif method_name == 'ARK3(2)4L[2]SA-ESDIRK':
      c = numpy.array([0., 1767732205903/2027836641118, 3/5, 1])
      b = numpy.array([1471266399579/7840856788654, -4482444167858/7529755066697, 11266239266428/11593286722821, 1767732205903/4055673282236])
      b2 = numpy.array([2756255671327/12835298489170, -10771552573575/22201958757719, 9247589265047/10645013368117, 2193209047091/5459859503100])
      gamma = 1767732205903/4055673282236
      A = numpy.array([[0., 0., 0., 0.], \
                       [1767732205903/4055673282236, gamma, 0., 0.], \
                       [2746238789719/10658868560708, -640167445237/6845629431997, gamma, 0.], \
                       [1471266399579/7840856788654,  -4482444167858/7529755066697, 11266239266428/11593286722821, gamma]])
      q = 3
      p = 2
      B = {
         "c": c,
         "A" : A,
         "q" : q,
         "b" : b,
         "p" : p,
         "b2": b2
         }

   elif method_name == 'ARK4(3)6L[2]SA-ERK':

      c = numpy.array([0., 1/2, 83/250, 31/50, 17/20, 1])
      b = numpy.array([82889/524892, 0., 15625/83664, 69875/102672, -2260/8211, 1/4])
      b2 = numpy.array([4586570599/29645900160, 0., 178811875/945068544, 814220225/1159782912, -3700637/11593932, 61727/225920])

      A = numpy.array([[0, 0, 0, 0, 0, 0], \
                       [1/2, 0, 0, 0, 0, 0], \
                       [13861/62500, 6889/62500, 0, 0, 0, 0], \
                       [-116923316275/2393684061468, -2731218467317/15368042101831, 9408046702089/11113171139209, 0, 0, 0], \
                       [-451086348788/2902428689909, -2682348792572/7519795681897, 12662868775082/11960479115383, 3355817975965/11060851509271, 0, 0], \
                       [647845179188./3216320057751, 73281519250/8382639484533, 552539513391/3454668386233, 3354512671639/8306763924573, 4040/17871, 0]])
      q = 4
      p = 3
      B = {
         "c": c,
         "A" : A,
         "q" : q,
         "b" : b,
         "p" : p,
         "b2": b2
         }

   elif method_name == 'ARK4(3)6L[2]SA-ESDIRK':

      c = numpy.array([0, 1/2, 83/250, 31/50, 17/20, 1])
      b = numpy.array([82889/524892, 0, 15625/83664, 69875/102672, -2260/8211, 1/4])
      b2 = numpy.array([4586570599/29645900160, 0, 178811875/945068544, 814220225/1159782912, -3700637/11593932, 61727/225920])
      A = numpy.array([[0, 0, 0, 0, 0, 0], \
                       [1/4, 1/4, 0, 0, 0, 0], \
                       [8611/62500, -1743/31250, 1/4, 0, 0, 0], \
                       [5012029/34652500, -654441/2922500, 174375/388108, 1/4, 0, 0], \
                       [15267082809/155376265600, -71443401/120774400, 730878875/902184768, 2285395/8070912, 1/4, 0], \
                       [82889/524892, 0, 15625/83664, 69875/102672, -2260/8211, 1/4]])
      q = 4
      p = 3
      B = {
         "c": c,
         "A" : A,
         "q" : q,
         "b" : b,
         "p" : p,
         "b2": b2
         }

   elif method_name == 'ARK4(3)7L[2]SA-ERK':

      c = numpy.array([0, 247/1000, 4276536705230/10142255878289, 67/200, 3/40, 7/10, 1])
      b = numpy.array([0, 0, 9164257142617/17756377923965, -10812980402763/74029279521829, 1335994250573/5691609445217, 2273837961795/8368240463276, 247/2000])
      b2 = numpy.array([0, 0, 4469248916618/8635866897933, -621260224600/4094290005349, 696572312987/2942599194819, 1532940081127/5565293938103, 2441/20000])
      A = numpy.array([[0, 0, 0, 0, 0, 0, 0], \
                       [247/1000, 0, 0, 0, 0, 0, 0], \
                       [247/4000, 2694949928731/7487940209513, 0, 0, 0, 0, 0], \
                       [464650059369/8764239774964, 878889893998/2444806327765, -952945855348/12294611323341, 0, 0, 0, 0], \
                       [476636172619/8159180917465, -1271469283451/7793814740893, -859560642026/4356155882851, 1723805262919/4571918432560, 0, 0, 0], \
                       [6338158500785/11769362343261, -4970555480458/10924838743837, 3326578051521/2647936831840, -880713585975/1841400956686, -1428733748635/8843423958496, 0, 0], \
                       [760814592956/3276306540349, 760814592956/3276306540349, -47223648122716/6934462133451, 71187472546993/9669769126921, -13330509492149/9695768672337, 11565764226357/8513123442827, 0]])
      q = 4
      p = 3
      B = {
         "c": c,
         "A" : A,
         "q" : q,
         "b" : b,
         "p" : p,
         "b2": b2
         }

   elif method_name == 'ARK4(3)7L[2]SA-ESDIRK':

      gam = 1235/10000
      c = numpy.array([0, 247/1000, 4276536705230/10142255878289, 67/200, 3/40, 7/10, 1])
      b = numpy.array([0, 0, 9164257142617/17756377923965, -10812980402763/74029279521829, 1335994250573/5691609445217, 2273837961795/8368240463276, 247/2000])
      b2 = numpy.array([0, 0, 4469248916618/8635866897933, -621260224600/4094290005349, 696572312987/2942599194819, 1532940081127/5565293938103, 2441/20000])
      A = numpy.array([[0, 0, 0, 0, 0, 0, 0], \
                       [gam, gam, 0, 0, 0, 0, 0], \
                       [624185399699/4186980696204, 624185399699/4186980696204, gam, 0, 0, 0, 0], \
                       [1258591069120/10082082980243, 1258591069120/10082082980243, -322722984531/8455138723562, gam, 0, 0, 0], \
                       [-436103496990/5971407786587, -436103496990/5971407786587, -2689175662187/11046760208243, 4431412449334/12995360898505, gam, 0, 0], \
                       [-2207373168298/14430576638973, -2207373168298/14430576638973, 242511121179/3358618340039, 3145666661981/7780404714551, 5882073923981/14490790706663, gam, 0], \
                       [0, 0, 9164257142617/17756377923965, -10812980402763/74029279521829, 1335994250573/5691609445217, 2273837961795/8368240463276, gam]])
      q = 4
      p = 3
      B = {
         "c": c,
         "A" : A,
         "q" : q,
         "b" : b,
         "p" : p,
         "b2": b2
         }

   elif method_name == 'ARK5(4)8L[2]SA-ERK':

      c = numpy.array([0, 41/100, 2935347310677/11292855782101, 1426016391358/7196633302097, 92/100, 24/100, 3/5, 1])
      b = numpy.array([-872700587467/9133579230613, 0, 0, 22348218063261/9555858737531, -1143369518992/8141816002931, -39379526789629/19018526304540, 32727382324388/42900044865799, 41/200])
      b2 = numpy.array([-975461918565/9796059967033, 0, 0, 78070527104295/32432590147079, -548382580838/3424219808633, -33438840321285/15594753105479, 3629800801594/4656183773603, 4035322873751/18575991585200])
      A = numpy.array([[0, 0, 0, 0, 0, 0, 0, 0], \
                       [41/100, 0, 0, 0, 0, 0, 0, 0], \
                       [367902744464/2072280473677, 677623207551/8224143866563, 0, 0, 0, 0, 0, 0], \
                       [1268023523408/10340822734521, 0, 1029933939417/13636558850479, 0, 0, 0, 0, 0], \
                       [14463281900351/6315353703477, 0, 66114435211212/5879490589093, -54053170152839/4284798021562, 0, 0, 0, 0], \
                       [14090043504691/34967701212078, 0, 15191511035443/11219624916014, -18461159152457/12425892160975, -281667163811/9011619295870, 0, 0, 0], \
                       [19230459214898/13134317526959, 0, 21275331358303/2942455364971, -38145345988419/4862620318723, -1/8, -1/8, 0, 0], \
                       [-19977161125411/11928030595625, 0, -40795976796054/6384907823539, 177454434618887/12078138498510, 782672205425/8267701900261, -69563011059811/9646580694205, 7356628210526/4942186776405, 0]])
      q = 5
      p = 4
      B = {
         "c": c,
         "A" : A,
         "q" : q,
         "b" : b,
         "p" : p,
         "b2": b2
         }

   elif method_name == 'ARK5(4)8L[2]SA-ESDIRK':

      c = numpy.array([0, 41/100, 2935347310677/11292855782101, 1426016391358/7196633302097, 92/100, 24/100, 3/5, 1])
      b = numpy.array([-872700587467/9133579230613, 0, 0, 22348218063261/9555858737531, -1143369518992/8141816002931, -39379526789629/19018526304540, 32727382324388/42900044865799, 41/200])
      b2 = numpy.array([-975461918565/9796059967033, 0, 0, 78070527104295/32432590147079, -548382580838/3424219808633, -33438840321285/15594753105479, 3629800801594/4656183773603, 4035322873751/18575991585200])
      A = numpy.array([[0, 0, 0, 0, 0, 0, 0, 0], \
                       [41/200, 41/200, 0, 0, 0, 0, 0, 0], \
                       [41/400, -567603406766/11931857230679, 41/200, 0, 0, 0, 0, 0], \
                       [683785636431/9252920307686, 0, -110385047103/1367015193373, 41/200, 0, 0, 0, 0], \
                       [3016520224154/10081342136671, 0, 30586259806659/12414158314087, -22760509404356/11113319521817, 41/200, 0, 0, 0], \
                       [218866479029/1489978393911, 0, 638256894668/5436446318841, -1179710474555/5321154724896, -60928119172/8023461067671, 41/200, 0, 0], \
                       [1020004230633/5715676835656, 0, 25762820946817/25263940353407, -2161375909145/9755907335909, -211217309593/5846859502534, -4269925059573/7827059040749, 41/200, 0], \
                       [-872700587467/9133579230613, 0, 0, 22348218063261/9555858737531, -1143369518992/8141816002931, -39379526789629/19018526304540, 32727382324388/42900044865799, 41/200]])
      q = 5
      p = 4
      B = {
         "c": c,
         "A" : A,
         "q" : q,
         "b" : b,
         "p" : p,
         "b2": b2
         }

   elif method_name == 'ARK5(4)8L[2]SAb-ERK':

      gam = 2/9
      c = numpy.array([0, 4/9, 6456083330201/8509243623797, 1632083962415/14158861528103, 6365430648612/17842476412687, 18/25, 191/200, 1])
      b = numpy.array([0, 0, 3517720773327/20256071687669, 4569610470461/17934693873752, 2819471173109/11655438449929, 3296210113763/10722700128969, -1142099968913/5710983926999, gam])
      b2 = numpy.array([0, 0, 520639020421/8300446712847, 4550235134915/17827758688493, 1482366381361/6201654941325, 5551607622171/13911031047899, -5266607656330/36788968843917, 1074053359553/5740751784926])
      A = numpy.array([[0, 0, 0, 0, 0, 0, 0, 0], \
                       [4/9, 0, 0, 0, 0, 0, 0, 0], \
                       [1/9, 1183333538310/1827251437969, 0, 0, 0, 0, 0, 0], \
                       [895379019517/9750411845327, 477606656805/13473228687314, -112564739183/9373365219272, 0, 0, 0, 0, 0], \
                       [-4458043123994/13015289567637, -2500665203865/9342069639922, 983347055801/8893519644487, 2185051477207/2551468980502, 0, 0, 0, 0], \
                       [-167316361917/17121522574472, 1605541814917/7619724128744, 991021770328/13052792161721, 2342280609577/11279663441611, 3012424348531/12792462456678, 0, 0, 0], \
                       [6680998715867/14310383562358, 5029118570809/3897454228471, 2415062538259/6382199904604, -3924368632305/6964820224454, -4331110370267/15021686902756, -3944303808049/11994238218192, 0, 0], \
                       [2193717860234/3570523412979, 2193717860234/3570523412979, 5952760925747/18750164281544, -4412967128996/6196664114337, 4151782504231/36106512998704, 572599549169/6265429158920, -457874356192/11306498036315, 0]])
      q = 5
      p = 4
      B = {
         "c": c,
         "A" : A,
         "q" : q,
         "b" : b,
         "p" : p,
         "b2": b2
         }

   elif method_name == 'ARK5(4)8L[2]SAb-ESDIRK':

      gam = 2/9
      c = numpy.array([0, 4/9, 6456083330201/8509243623797, 1632083962415/14158861528103, 6365430648612/17842476412687, 18/25, 191/200, 1])
      b = numpy.array([0, 0, 3517720773327/20256071687669, 4569610470461/17934693873752, 2819471173109/11655438449929, 3296210113763/10722700128969, -1142099968913/5710983926999, gam])
      b2 = numpy.array([0, 0, 520639020421/8300446712847, 4550235134915/17827758688493, 1482366381361/6201654941325, 5551607622171/13911031047899, -5266607656330/36788968843917, 1074053359553/5740751784926])
      A = numpy.array([[0, 0, 0, 0, 0, 0, 0, 0], \
                       [gam, gam, 0, 0, 0, 0, 0, 0], \
                       [2366667076620/8822750406821, 2366667076620/8822750406821, gam, 0, 0, 0, 0, 0], \
                       [-257962897183/4451812247028, -257962897183/4451812247028, 128530224461/14379561246022, gam, 0, 0, 0, 0], \
                       [-486229321650/11227943450093, -486229321650/11227943450093, -225633144460/6633558740617, 1741320951451/6824444397158, gam, 0, 0, 0], \
                       [621307788657/4714163060173, 621307788657/4714163060173, -125196015625/3866852212004, 940440206406/7593089888465, 961109811699/6734810228204, gam, 0, 0], \
                       [2036305566805/6583108094622, 2036305566805/6583108094622, -3039402635899/4450598839912, -1829510709469/31102090912115, -286320471013/6931253422520, 8651533662697/9642993110008, gam, 0], \
                       [0, 0, 3517720773327/20256071687669, 4569610470461/17934693873752, 2819471173109/11655438449929, 3296210113763/10722700128969, -1142099968913/5710983926999, gam]])
      q = 5
      p = 4
      B = {
         "c": c,
         "A" : A,
         "q" : q,
         "b" : b,
         "p" : p,
         "b2": b2
         }

   elif method_name == 'ESDIRK3(2)5L[2]SA':

      # From: Table 10 of Kennedy & Carpenter, NASA/TM-2016-219173

      s2 = numpy.sqrt(2)
      A = numpy.array([[0, 0, 0, 0, 0], \
                       [9/40, 9/40, 0, 0, 0], \
                       [9*(1+s2)/80, 9*(1+s2)/80, 9/40, 0, 0], \
                       [(22+15*s2)/80/(1+s2), (22+15*s2)/80/(1+s2), -7/40/(1+s2), 9/40, 0], \
                       [(2398+1205*s2)/2835/(4+3*s2), (2398+1205*s2)/2835/(4+3*s2), -2374*(1+2*s2)/2835/(5+3*s2), 5827/7560, 9/40]])
      b = numpy.array([(2398+1205*s2)/2835/(4+3*s2), (2398+1205*s2)/2835/(4+3*s2), -2374*(1+2*s2)/2835/(5+3*s2), 5827/7560, 9/40])
      c = numpy.array([0, 9/20, 9*(2+s2)/40, 3/5, 1])
      b2 = numpy.array([4555948517383/24713416420891, 4555948517383/24713416420891, -7107561914881/25547637784726, 30698249/44052120, 49563/233080])
      q = 3
      p = 2
      B = {
         "c": c,
         "A" : A,
         "q" : q,
         "b" : b,
         "p" : p,
         "b2": b2
         }

   elif method_name == 'ESDIRK3(2I)5L[2]SA':

      # From: Table 11 of Kennedy & Carpenter, NASA/TM-2016-219173

      c = numpy.array([0, 9/20, 4/5, 1, 1])
      b = numpy.array([7415/34776, 9920/30429, 4845/9016, -5827/19320, 9/40])
      b2 = numpy.array([23705/104328, 29720/91287, 4225/9016, -69304987/337732920, 42843/233080])
      A = numpy.array([[0, 0, 0, 0, 0], \
                       [9/40, 9/40, 0, 0, 0], \
                       [19/72, 14/45, 9/40, 0, 0], \
                       [3337/11520, 233/720, 207/1280, 9/40, 0], \
                       [7415/34776, 9920/30429, 4845/9016, -5827/19320, 9/40]])
      q = 3
      p = 2
      B = {
         "c": c,
         "A" : A,
         "q" : q,
         "b" : b,
         "p" : p,
         "b2": b2
         }

   elif method_name == 'ESDIRK4(3)6L[2]SA':

      # From: Table 16 of Kennedy & Carpenter, NASA/TM-2016-219173
      s2 = numpy.sqrt(2)
      c = numpy.array([0, 1/2, (2-s2)/4, 5/8, 26/25, 1])
      b = numpy.array([(1181-987*s2)/13782, (1181-987*s2)/13782, 47*(-267+1783*s2)/273343, -16*(-22922+3525*s2)/571953, -15625*(97+376*s2)/90749876, 1/4])
      b2 = numpy.array([-480923228411/4982971448372, -480923228411/4982971448372, 6709447293961/12833189095359, 3513175791894/6748737351361, -498863281070/6042575550617, 2077005547802/8945017530137])
      A = numpy.array([[0, 0, 0, 0, 0, 0], \
                       [1/4, 1/4, 0, 0, 0, 0], \
                       [(1-s2)/8, (1-s2)/8, 1/4, 0, 0, 0], \
                       [(5-7*s2)/64, (5-7*s2)/64, 7*(1+s2)/32, 1/4, 0, 0], \
                       [-(13796+54539*s2)/125000, -(13796+54539*s2)/125000, (506605+132109*s2)/437500, 166*(-97+376*s2)/109375, 1/4, 0], \
                       b])
      q = 4
      p = 3
      B = {
         "c": c,
         "A" : A,
         "q" : q,
         "b" : b,
         "p" : p,
         "b2": b2
         }

   elif method_name == 'ESDIRK4(3I)6L[2]SA':

      # From: Table 17 of Kennedy & Carpenter, NASA/TM-2016-219173
      c = numpy.array([0, 1/2, (2-numpy.sqrt(2))/4, 2012122486997/3467029789466, 1, 1])
      b = numpy.array([657241292721/9909463049845, 657241292721/9909463049845, 1290772910128/5804808736437, 1103522341516/2197678446715, -3/28, 1/4])
      b2 = numpy.array([-71925161075/3900939759889, -71925161075/3900939759889, 2973346383745/8160025745289, 3972464885073/7694851252693, -263368882881/4213126269514, 3295468053953/15064441987965])
      A = numpy.array([[0, 0, 0, 0, 0, 0], \
                       [1/4, 1/4, 0, 0, 0, 0], \
                       [-1356991263433/26208533697614, -1356991263433/26208533697614, 1/4, 0, 0, 0], \
                       [-1778551891173/14697912885533, -1778551891173/14697912885533, 7325038566068/12797657924939, 1/4, 0, 0], \
                       [-24076725932807/39344244018142, -24076725932807/39344244018142, 9344023789330/6876721947151, 11302510524611/18374767399840, 1/4, 0], \
                       b])
      q = 4
      p = 3
      B = {
         "c": c,
         "A" : A,
         "q" : q,
         "b" : b,
         "p" : p,
         "b2": b2
         }

   elif method_name == 'QESDIRK4(3)6L[2]SA':

      # From: Table 20 of Kennedy & Carpenter, NASA/TM-2016-219173

      c = numpy.array([0, 16/75, 8*(2-numpy.sqrt(2))/25, 1298154247449/2478647287318, 11563539331134/11078645848867, 1])
      b = numpy.array([540088238697/4693226184761, 0, 1094762490994/7880993776667, 4016564763003/7185357966874, -411820258827/3096789411938, 8/25])
      b2 = numpy.array([-374484326677/8442488809460, -41125091159938/25963879779069, 24025088270494/12927594097169, 5193917461301/8985383982321, -1843122001830/16078617943063, 2439572212972/7960792257433])
      A = numpy.array([[0, 0, 0, 0, 0, 0], \
                       [8/75, 8/75, 0, 0, 0, 0], \
                       [605497861978/9136257189845, -2127848798551/10702252975294, 8/25, 0, 0, 0], \
                       [-3005106686955/6150333508049, -68662668193799/11091168490809, 80786898110822/11737001380747, 8/25, 0, 0], \
                       [-26162805558846/8363194173203, -291987295964487/9066074244437, 384682892278670/10959450712301, 13555548451102/14148104892819, 8/25, 0], \
                       b])
      q = 4
      p = 3
      B = {
         "c": c,
         "A" : A,
         "q" : q,
         "b" : b,
         "p" : p,
         "b2": b2
         }

   elif method_name == 'ESDIRK5(3)6L[2]SA':

      # From: Table 23 of Kennedy & Carpenter, NASA/TM-2016-219173

      c = numpy.array([0, 4024571134387/7237035672548, 14228244952610/13832614967709, 1/10, 3/50, 1])
      b = numpy.array([-6225479754948/6925873918471, 6894665360202/11185215031699, -2508324082331/20512393166649, -7289596211309/4653106810017, 39811658682819/14781729060964, 3282482714977/11805205429139])
      b2 = numpy.array([-2512930284403/5616797563683, 5849584892053/8244045029872, -718651703996/6000050726475, -18982822128277/13735826808854, 23127941173280/11608435116569, 2847520232427/11515777524847])
      A = numpy.array([[0, 0, 0, 0, 0, 0], \
                       [3282482714977/11805205429139, 3282482714977/11805205429139, 0, 0, 0, 0], \
                       [606638434273/1934588254988, 2719561380667/6223645057524, 3282482714977/11805205429139, 0, 0, 0], \
                       [-651839358321/6893317340882, -1510159624805/11312503783159, 235043282255/4700683032009, 3282482714977/11805205429139, 0, 0], \
                       [-5266892529762/23715740857879, -1007523679375/10375683364751, 521543607658/16698046240053, 514935039541/7366641897523, 3282482714977/11805205429139, 0], \
                       b])
      q = 5
      p = 3
      B = {
         "c": c,
         "A" : A,
         "q" : q,
         "b" : b,
         "p" : p,
         "b2": b2
         }

   elif method_name == 'ESDIRK5(4)7L[2]SA':

      # From: Table 25 of Kennedy & Carpenter, NASA/TM-2016-219173

      c = numpy.array([0, 46/125, 1518047795759/14084074382095, 13/25, 5906118540659/9042400211275, 26/25, 1])
      b = numpy.array([0, -1319096626979/17356965168099, 4356877330928/10268933656267, 922991294344/3350617878647, 4729382008034/14755765856909, -308199069217/5897303561678, 23/125])
      b[0] = 1-numpy.sum(b)
      b2 = numpy.array([0, -12068858301481/111697653055985, 30204157393951/62440428688139, 26156819792768/110856972047457, 33531609809941/89326307438822, -18686091006953/578397443530870, 10582397456777/69011126173064])
      b2[0] = 1-numpy.sum(b2)
      A = numpy.array([[0, 0, 0, 0, 0, 0, 0], \
                       [0, 23/125, 0, 0, 0, 0, 0], \
                       [0, -121529886477/3189120653983, 23/125, 0, 0, 0, 0], \
                       [0, 186345625210/8596203768457, 3681435451073/12579882114497, 23/125, 0, 0, 0], \
                       [0, -9898129553915/11630542248213, 19565727496993/11159348038501, 2073446517052/4961027473423,  23/125, 0, 0], \
                       [0, -39752543191591/7894275939720, 52228808998390/5821762529307, 2756378382725/8748785577174, 17322065038796/10556643942083, 23/125, 0], \
                       b])
      A[1,0] = c[1]-numpy.sum(A[1,:])
      A[2,0] = c[2]-numpy.sum(A[2,:])
      A[3,0] = c[3]-numpy.sum(A[3,:])
      A[4,0] = c[4]-numpy.sum(A[4,:])
      A[5,0] = c[5]-numpy.sum(A[5,:])
      q = 5
      p = 4
      B = {
         "c": c,
         "A" : A,
         "q" : q,
         "b" : b,
         "p" : p,
         "b2": b2
         }
#
#   elif method_name == 'Sayfy-Aburub-4-3-ERK':
#
#      A = [z, z, z, z, z, z; ...
#           v(1)/v(2), z, z, z, z, z
#           v(-1), v(2), z, z, z, z
#           v(1)/v(6), v(2)/v(3), v(1)/v(6), z, z, z
#           v(0.137), v(0.226), v(0.137), z, z, z
#           v(0.452), v(-0.904), v(-0.548), z, v(2), z]
#      b = [v(1)/v(6), v(1)/v(3), v(1)/v(12), z, v(1)/v(3), v(1)/v(12)]
#      b2 = [v(1)/v(6), v(2)/v(3), v(1)/v(6), z, z, z]
#      c = [z; v(1)/v(2); v(1); v(1); v(1)/v(2); v(1)]
#      q = 4
#      p = 3
#      B = [c, A; q, b; p, b2]
#
#   elif method_name == 'Ascher(2,3,3)-ERK':
#
#      gamma = (v(3) + sqrt(v(3)))/v(6)
#      c = [z; gamma; v(1)-gamma]
#      b = [z, v(1)/v(2), v(1)/v(2)]
#      A = [z,       z,           z
#           gamma,   z,           z
#           gamma-v(1), v(2)*(v(1)-gamma), z]
#      q = 3
#      B = [c, A; q, b]
#
#   elif method_name == 'Ascher(2,3,3)-SDIRK':
#
#      gamma = (v(3) + sqrt(v(3)))/v(6)
#      c = [z; gamma; v(1)-gamma]
#      b = [z, v(1)/v(2), v(1)/v(2)]
#      A = [z, z,         z
#           z, gamma,     z
#           z, v(1)-v(2)*gamma, gamma]
#      q = 3
#      B = [c, A; q, b]
#
#   elif method_name == 'Ascher(2,3,2)-ERK':
#
#      gamma = (v(2)-sqrt(v(2)))/v(2)
#      delta = -v(2)*sqrt(v(2))/v(3)
#      c = [z; gamma; 1]
#      b = [z, v(1)-gamma, gamma]
#      A = [z, z, z
#           gamma, z, z
#           delta, v(1)-delta, z]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'Ascher(2,3,2)-SDIRK':
#
#      gamma = (v(2)-sqrt(v(2)))/v(2)
#      c = [z; gamma; v(1)]
#      b = [z, v(1)-gamma, gamma]
#      A = [z, z,       z
#           z, gamma,   z
#           z, v(1)-gamma, gamma]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'Ascher(2,2,2)-ERK':
#
#      gamma = (v(2)-sqrt(v(2)))/v(2)
#      delta = v(1)-v(1)/(v(2)*gamma)
#      c = [z; gamma; v(1)]
#      b = [delta, v(1)-delta, z]
#      A = [z, z, z
#           gamma, z, z
#           delta, v(1)-delta, z]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'Ascher(2,2,2)-SDIRK':
#
#      gamma = (v(2)-sqrt(v(2)))/v(2)
#      c = [z; gamma; v(1)]
#      b = [z, v(1)-gamma, gamma]
#      A = [z, z,       z
#           z, gamma,   z
#           z, v(1)-gamma, gamma]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'Ascher(3,4,3)-ERK':
#
#      gamma  = v(0.4358665215084590)
#      gamma2 = gamma^2
#
#      b1 = -v(1.5) * gamma2 + v(4) * gamma - v(0.25)
#      b2 =  v(1.5) * gamma2 - v(5) * gamma + v(1.25)
#
#      a42 = v(0.5529291480359398)
#      a43 = v(0.5529291480359398)
#
#      a31 = (v(1) - v(4.5) * gamma + v(1.5) * gamma2) * a42 ...
#          + (v(2.75) - v(10.5) * gamma + v(3.75) * gamma2) * a43 ...
#          - v(3.5) + v(13) * gamma - v(4.5) * gamma2
#
#      a32 = (-v(1) + v(4.5) * gamma - v(1.5) * gamma2) * a42 ...
#          + (-v(2.75) + v(10.5) * gamma - v(3.75) * gamma2) * a43 ...
#          + v(4) - v(12.5) * gamma + v(4.5) * gamma2
#
#      a41 = v(1) - a42 - a43
#
#      c = [z; gamma; (v(1)+gamma)/v(2); v(1)]
#      b = [z, b1, b2, gamma]
#      A = [z,     z,   z,   z
#           gamma, z,   z,   z
#           a31,   a32, z,   z
#           a41,   a42, a43, z]
#      q = 3
#      B = [c, A; q, b]
#
#   elif method_name == 'Ascher(3,4,3)-SDIRK':
#
#      gamma  = v(0.4358665215084590)
#      gamma2 = gamma^2
#
#      b1 = -v(1.5) * gamma2 + v(4) * gamma - v(0.25)
#      b2 =  v(1.5) * gamma2 - v(5) * gamma + v(1.25)
#
#      c = [z; gamma; (v(1)+gamma)/v(2); v(1)]
#      b = [z, b1, b2, gamma]
#      A = [z,     z,           z,     z
#           z, gamma,           z,     z
#           z, (v(1)-gamma)/v(2), gamma,     z
#           z, b1,             b2, gamma]
#      q = 3
#      B = [c, A; q, b]
#
#   elif method_name == 'Ascher(4,4,3)-ERK':
#
#      c = [z; v(1)/v(2); v(2)/v(3); v(1)/v(2); v(1)]
#      b = [v(1)/v(4), v(7)/v(4), v(3)/v(4), v(-7)/v(4), z]
#      A = [          z,          z,         z,          z, z
#             v(1)/v(2),          z,         z,          z, z
#           v(11)/v(18), v(1)/v(18),         z,          z, z
#             v(5)/v(6), v(-5)/v(6), v(1)/v(2),          z, z
#             v(1)/v(4),  v(7)/v(4), v(3)/v(4), v(-7)/v(4), z]
#      q = 3
#      B = [c, A; q, b]
#
#   elif method_name == 'Ascher(4,4,3)-SDIRK':
#
#      c = [v(1)/v(2); v(2)/v(3); v(1)/v(2); v(1)]
#      b = [v(3)/v(2), v(-3)/v(2), v(1)/v(2), v(1)/v(2)]
#      A = [ v(1)/v(2),          z,         z,         z
#            v(1)/v(6),  v(1)/v(2),         z,         z
#           v(-1)/v(2),  v(1)/v(2), v(1)/v(2),         z
#            v(3)/v(2), v(-3)/v(2), v(1)/v(2), v(1)/v(2)]
#      q = 3
#      B = [c, A; q, b]
#
#   elif method_name == 'Knoth-Wolke-ERK':
#
#      c = [z; v(1)/v(3); v(3)/v(4)]
#      b = [v(1)/v(6), v(3)/v(10), v(8)/v(15)]
#      A = [z, z, z
#           v(1)/v(3), z, z
#           v(-3)/v(16), v(15)/v(16), z]
#      q = 3
#      B = [c, A; q, b]
#
#   elif method_name == '3/8-Rule-ERK':
#
#      c = [z; v(1)/v(3); v(2)/v(3); v(1)]
#      b = [v(1)/v(8), v(3)/v(8), v(3)/v(8), v(1)/v(8)]
#      A = [z, z, z, z
#           v(1)/v(3), z, z, z
#           v(-1)/v(3), v(1), z, z
#           v(1), v(-1), v(1), z]
#      q = 4
#      B = [c, A; q, b]
#
#   elif method_name == 'Cooper4-ERK':
#
#      c = [z; v(2)/v(3); v(2)/v(3); v(1)]
#      b = [v(1)/v(4), v(1)/v(4), v(1)/v(2), z]
#      A = [        z,         z,         z, z
#           v(2)/v(3),         z,         z, z
#           v(1)/v(6), v(1)/v(2),         z, z
#           v(1)/v(4), v(1)/v(4), v(1)/v(2), z]
#      q = 3
#      B = [c, A; q, b]
#
#   elif method_name == 'Cooper4-ESDIRK':
#
#      c = [z; v(2)/v(3); v(2)/v(3); v(1)]
#      b = [v(1)/v(4), v(1)/v(4), v(1)/v(2), z]
#      A = [z, z, z, z
#           (v(1)-sqrt(v(3)))/v(6), (v(3)+sqrt(v(3)))/v(6), z, z
#           (v(5)+sqrt(v(3)))/v(12), -(v(1)+sqrt(v(3)))/v(4), (v(3)+sqrt(v(3)))/v(6), z
#           v(1)/v(4), v(1)/v(4), v(1)/v(2), z]
#      q = 3
#      B = [c, A; q, b]
#
#   elif method_name == 'Cooper6-ERK':
#
#      c = [z; v(1)/v(2); v(1)/v(2); v(1)/v(2); v(1); v(1)]
#      b = [v(1)/v(6), z, z, v(2)/v(3), v(1)/v(6), z]
#      A = [z, z, z, z, z, z
#           v(1)/v(2), z, z, z, z, z
#           v(1)/v(4), v(1)/v(4), z, z, z, z
#           v(1)/v(4), v(1)/v(4), z, z, z, z
#           z, v(-1), z, v(2), z, z
#           v(1)/v(6), z, z, v(2)/v(3), v(1)/v(6), z]
#      q = 5
#      B = [c, A; q, b]
#
#   elif method_name == 'Cooper6-ESDIRK':
#
#      beta = v(1.0685790213)
#      c = [z; v(1)/v(2); v(1)/v(2); v(1)/v(2); 1; 1]
#      b = [v(1)/v(6), z, z, v(2)/v(3), v(1)/v(6), z]
#      A = [z, z, z, z, z, z
#           (v(1)-v(2)*beta)/v(2), beta, z, z, z, z
#           v(1)/v(4), (v(1)-v(4)*beta)/v(4), beta, z, z, z
#           v(1)/v(4), beta/v(2), (v(1)-v(6)*beta)/v(4), beta, z, z
#           z, v(-2)*beta, (v(1)-v(6)*beta-v(8)*beta^2)/(v(1)-v(4)*beta), v(4)*beta/(v(1)-v(4)*beta), z, z
#           v(1)/v(6), z, z, v(2)/v(3), v(1)/v(6), z]
#      q = 5
#      B = [c, A; q, b]
#
#   elif method_name == 'Heun-Euler-ERK':
#
#      A = [ z, z; 1, z]
#      b = [ v(0.5), v(0.5)]
#      b2 = [ v(1), z]
#      c = [ z; v(1)]
#      q = 2
#      p = 1
#      B = [c, A; q, b; p, b2]
#
#   elif method_name == 'Bogacki-Shampine-ERK':
#
#      A = [z, z, z, z; v(1)/v(2), z, z, z; z, v(3)/v(4), z, z; v(2)/v(9), v(1)/v(3), v(4)/v(9), z]
#      b = [v(2)/v(9), v(1)/v(3), v(4)/v(9), z]
#      b2 = [v(7)/v(24), v(1)/v(4), v(1)/v(3), v(1)/v(8)]
#      c = [z; v(1)/v(2); v(3)/v(4); v(1)]
#      q = 3
#      p = 2
#      B = [c, A; q, b; p, b2]
#
#   elif method_name == 'Fehlberg-ERK':
#
#      A = [z, z, z, z, z, z; ...
#           v(1)/v(4), z, z, z, z, z; ...
#           v(3)/v(32), v(9)/v(32), z, z, z, z; ...
#           v(1932)/v(2197), v(-7200)/v(2197), v(7296)/v(2197), z, z, z; ...
#           v(439)/v(216), v(-8), v(3680)/v(513), v(-845)/v(4104), z, z; ...
#           v(-8)/v(27), v(2), v(-3544)/v(2565), v(1859)/v(4104), v(-11)/v(40), z]
#      b = [ v(16)/v(135), z, v(6656)/v(12825), v(28561)/v(56430), v(-9)/v(50), v(2)/v(55)]
#      b2 = [ v(25)/v(216), z, v(1408)/v(2565), v(2197)/v(4104), v(-1)/v(5), z]
#      c = [ z; v(1)/v(4); v(3)/v(8); v(12)/v(13); v(1); v(1)/v(2)]
#      q = 5
#      p = 4
#      B = [c, A; q, b; p, b2]
#
#   elif method_name == 'Cash-Karp-ERK':
#
#      A = [ z, z, z, z, z, z; ...
#            v(1)/v(5), z, z, z, z, z; ...
#            v(3)/v(40), v(9)/v(40), z, z, z, z; ...
#            v(3)/v(10), v(-9)/v(10), v(6)/v(5), z, z, z; ...
#            v(-11)/v(54), v(5)/v(2), v(-70)/v(27), v(35)/v(27), z, z; ...
#            v(1631)/v(55296), v(175)/v(512), v(575)/v(13824), v(44275)/v(110592), v(253)/v(4096), z]
#      b = [ v(37)/v(378), z, v(250)/v(621), v(125)/v(594), z, v(512)/v(1771)]
#      b2 = [ v(2825)/v(27648), z, v(18575)/v(48384), v(13525)/v(55296), v(277)/v(14336), v(1)/v(4)]
#      c = [ z; v(1)/v(5); v(3)/v(10); v(3)/v(5); v(1); v(7)/v(8)]
#      q = 5
#      p = 4
#      B = [c, A; q, b; p, b2]
#
#   elif method_name == 'Dormand-Prince-ERK':
#
#      A = [ z, z, z, z, z, z, z; ...
#            v(1)/v(5), z, z, z, z, z, z; ...
#            v(3)/v(40), v(9)/v(40), z, z, z, z, z; ...
#            v(44)/v(45), v(-56)/v(15), v(32)/v(9), z, z, z, z; ...
#            v(19372)/v(6561), v(-25360)/v(2187), v(64448)/v(6561), v(-212)/v(729), z, z, z; ...
#            v(9017)/v(3168), v(-355)/v(33), v(46732)/v(5247), v(49)/v(176), v(-5103)/v(18656), z, z; ...
#            v(35)/v(384), z, v(500)/v(1113), v(125)/v(192), v(-2187)/v(6784), v(11)/v(84), z]
#      b = [ v(35)/v(384), z, v(500)/v(1113), v(125)/v(192), v(-2187)/v(6784), v(11)/v(84), z]
#      b2 = [v(5179)/v(57600), z, v(7571)/v(16695), v(393)/v(640), v(-92097)/v(339200), v(187)/v(2100), v(1)/v(40)]
#      c = [ z; v(1)/v(5); v(3)/v(10); v(4)/v(5); v(8)/v(9); v(1); v(1)]
#      q = 5
#      p = 4
#      B = [c, A; q, b; p, b2]
#
#   elif method_name == 'TRBDF2-ESDIRK':
#
#      A = [z, z, z; ...
#         (v(2)-sqrt(v(2)))/v(2), (v(2)-sqrt(v(2)))/v(2), z; ...
#         sqrt(v(2))/v(4), sqrt(v(2))/v(4), (v(2)-sqrt(v(2)))/v(2)]
#      b = [sqrt(v(2))/v(4), sqrt(v(2))/v(4), (v(2)-sqrt(v(2)))/v(2)]
#      b2 = [(v(1)-sqrt(v(2))/v(4))/v(3), (v(3)*sqrt(v(2))/v(4)+v(1))/v(3), (v(2)-sqrt(v(2)))/v(6)]
#      c = [z; v(2)-sqrt(v(2)); v(1)]
#      q = 2
#      p = 3
#      B = [c, A; q, b; p, b2]
#
#   elif method_name == 'TRX2-ESDIRK':
#
#      A = [ z, z, z; v(0.25), v(0.25), z; v(0.25), v(0.5), v(0.25)]
#      b = [ v(0.25), v(0.5), v(0.25)]
#      b2 = [ v(1)/v(6), v(2)/v(3), v(1)/v(6)]
#      c = [ z; v(0.5); v(1)]
#      q = 2
#      p = 3
#      B = [c, A; q, b; p, b2]
#
#   elif method_name == 'Billington-SDIRK':
#
#      A = [v(0.292893218813), z, z; ...
#           v(0.798989873223), v(0.292893218813), z; ...
#           v(0.740789228841), v(0.259210771159), v(0.292893218813)]
#      b = [ v(0.740789228840), v(0.259210771159), z]
#      b2 = [ v(0.691665115992), v(0.503597029883), v(-0.195262145876)]
#      c = [ v(0.292893218813); v(1.091883092037); v(1.292893218813)]
#      q = 2
#      p = 3
#      B = [c, A; q, b; p, b2]
#
#   elif method_name == 'Cash(5,2,4)-SDIRK':
#
#      A = [v(0.435866521508), z, z, z, z; ...
#           v(-1.13586652150), v(0.435866521508), z, z, z; ...
#           v(1.08543330679), v(-0.721299828287), v(0.435866521508), z, z; ...
#           v(0.416349501547), v(0.190984004184), v(-0.118643265417), v(0.435866521508), z; ...
#           v(0.896869652944), v(0.0182725272734), v(-0.0845900310706), ...
#               v(-0.266418670647), v(0.435866521508)]
#      b = [v(0.896869652944), v(0.0182725272734), v(-0.0845900310706), ...
#             v(-0.266418670647), v(0.435866521508)]
#      b2 = [(-v(0.7)-v(0.5))/(-v(0.7)-v(0.435866521508)), ...
#             (v(0.5)-v(0.435866521508))/(-v(0.7)-v(0.435866521508)), z, z, z]
#      c = [v(0.435866521508); v(-0.7); v(0.8); v(0.924556761814); v(1)]
#      q = 4
#      p = 2
#      B = [c, A; q, b; p, b2]
#
#   elif method_name == 'Cash(5,3,4)-SDIRK':
#
#      A = [v(0.435866521508), z, z, z, z; ...
#           v(-1.13586652150), v(0.435866521508), z, z, z; ...
#           v(1.08543330679), v(-0.721299828287), v(0.435866521508), z, z; ...
#           v(0.416349501547), v(0.190984004184), v(-0.118643265417), v(0.435866521508), z;...
#           v(0.896869652944), v(0.0182725272734), v(-0.0845900310706), ...
#             v(-0.266418670647), v(0.435866521508)]
#      b = [v(0.896869652944), v(0.0182725272734), v(-0.0845900310706), ...
#             v(-0.266418670647), v(0.435866521508)]
#      b2 = [v(0.776691932910), v(0.0297472791484), v(-0.0267440239074), v(0.220304811849), z]
#      c = [v(0.435866521508); v(-0.7); v(0.8); v(0.924556761814); v(1)]
#      q = 4
#      p = 3
#      B = [c, A; q, b; p, b2]
#
#   elif method_name == 'Kvaerno(4,2,3)-ESDIRK':
#
#      A = [z, z, z, z; ...
#           v(0.4358665215), v(0.4358665215), z, z; ...
#           v(0.490563388419108), v(0.073570090080892), v(0.4358665215), z; ...
#           v(0.308809969973036), v(1.490563388254106), v(-1.235239879727145), v(0.4358665215)]
#      b = [v(0.308809969973036), v(1.490563388254106), v(-1.235239879727145), v(0.4358665215)]
#      b2 = [v(0.490563388419108), v(0.073570090080892), v(0.4358665215), z]
#      c = [z; v(0.871733043); v(1); v(1)]
#      q = 3
#      p = 2
#      B = [c, A; q, b; p, b2]
#
#   elif method_name == 'Kvaerno(5,3,4)-ESDIRK':
#
#      A = [z, z, z, z, z; ...
#           v(0.4358665215), v(0.4358665215), z, z, z; ...
#           v(0.140737774731968), v(-0.108365551378832), v(0.4358665215), z, z;...
#           v(0.102399400616089), v(-0.376878452267324), v(0.838612530151233), v(0.4358665215), z;...
#           v(0.157024897860995), v(0.117330441357768), v(0.61667803039168), v(-0.326899891110444), v(0.4358665215)]
#      b = [v(0.157024897860995), v(0.117330441357768), v(0.61667803039168), v(-0.326899891110444), v(0.4358665215)]
#      b2 = [v(0.102399400616089), v(-0.376878452267324), v(0.838612530151233), v(0.4358665215), z]
#      c = [z; v(0.871733043); v(0.468238744853136); v(1); v(1)]
#      q = 4
#      p = 3
#      B = [c, A; q, b; p, b2]
#
#   elif method_name == 'Kvaerno(7,4,5)-ESDIRK':
#
#      A = [z, z, z, z, z, z, z; ...
#           v(0.26), v(0.26), z, z, z, z, z; ...
#           v(0.13), v(0.84033320996790809), v(0.26), z, z, z, z; ...
#           v(0.22371961478320505), v(0.47675532319799699), v(-0.06470895363112615), v(0.26), z, z, z; ...
#           v(0.16648564323248321), v(0.10450018841591720), v(0.03631482272098715), v(-0.13090704451073998), v(0.26), z, z; ...
#           v(0.13855640231268224), z, v(-0.04245337201752043), v(0.02446657898003141), v(0.61943039072480676), v(0.26), z; ...
#           v(0.13659751177640291), z, v(-0.05496908796538376), v(-0.04118626728321046), v(0.62993304899016403), v(0.06962479448202728), v(0.26)]
#
#      b = [v(0.13659751177640291), z, v(-0.05496908796538376), v(-0.04118626728321046), v(0.62993304899016403), v(0.06962479448202728), v(0.26)]
#      b2 = [v(0.13855640231268224), z, v(-0.04245337201752043), v(0.02446657898003141), v(0.61943039072480676), v(0.26), z]
#      c = [z; v(0.52); v(1.230333209967908); v(0.895765984350076); v(0.436393609858648); v(1); v(1)]
#      q = 5
#      p = 4
#      B = [c, A; q, b; p, b2]
#
#   elif method_name == 'ERK-1-1':
#
#      A = [z]
#      b = [v(1)]
#      c = [z]
#      q = 1
#      B = [c, A; q, b]
#
#   elif method_name == 'ERK-2-2':
#
#      A = [ z, z; v(2)/v(3), z]
#      b = [ v(1)/v(4), v(3)/v(4)]
#      c = [ z; v(2)/v(3)]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'ERK-3-3':
#
#      A = [ z, z, z; v(1)/v(2), z, z; v(-1), v(2), z]
#      b = [ v(1)/v(6), v(2)/v(3), v(1)/v(6)]
#      b2 = [z, v(1), z]
#      c = [ z; v(1)/v(2); v(1)]
#      q = 3
#      p = 2
#      B = [c, A; q, b; p, b2]
#
#   elif method_name == 'ERK-4-4':
#
#      A = [z, z, z, z; v(1)/v(2), z, z, z; z, v(1)/v(2), z, z; z, z, v(1), z]
#      b = [v(1)/v(6), v(1)/v(3), v(1)/v(3), v(1)/v(6)]
#      c = [z; v(1)/v(2); v(1)/v(2); v(1)]
#      q = 4
#      B = [c, A; q, b]
#
#   elif method_name == 'Butcher-7-6-ERK':
#
#      A = [z, z, z, z, z, z, z
#          v(1)/v(3), z, z, z, z, z, z
#          z, v(2)/v(3), z, z, z, z, z
#          v(1)/v(12), v(1)/v(3), -v(1)/v(12), z, z, z, z
#          v(25)/v(48), -v(55)/v(24), v(35)/v(48), v(15)/v(8), z, z, z
#          v(3)/v(20), -v(11)/v(24), -v(1)/v(8), v(1)/v(2), v(1)/v(10), z, z
#          -v(261)/v(260), v(33)/v(13), v(43)/v(156), -v(118)/v(39), v(32)/v(195), v(80)/v(39), z]
#      b = [v(13)/v(200), z, v(11)/v(40), v(11)/v(40), v(4)/v(25), v(4)/v(25), v(13)/v(200)]
#      c = [z; v(1)/v(3); v(2)/v(3); v(1)/v(3); v(5)/v(6); v(1)/v(6); v(1)]
#      q = 6
#      B = [c, A; q, b]
#
#   elif method_name == 'Butcher-7-6b-ERK':
#
#      A = [z, z, z, z, z, z, z
#           v(2)/v(5), z, z, z, z, z, z
#           z, v(4)/v(5), z, z, z, z, z
#           v(169)/v(1458), v(110)/v(729), -v(65)/v(1458), z, z, z, z
#           -v(44)/v(675), -v(88)/v(135), v(76)/v(351), v(336)/v(325), z, z, z
#           v(21)/v(106), z, -v(105)/v(689), -v(324)/v(689), v(45)/v(106), z, z
#           -v(2517)/v(4864), -v(55)/v(38), v(10615)/v(31616), v(567)/v(7904), v(7245)/v(4864), v(2597)/v(2432), z]
#      b = [z, z, v(1375)/v(4992), v(6561)/v(20384), v(3375)/v(12544), v(53)/v(768), v(19)/v(294)]
#      c = [z; v(2)/v(5); v(4)/v(5); v(2)/v(9); v(8)/v(15); z; v(1)]
#      q = 6
#      B = [c, A; q, b]
#
#   elif method_name == 'Butcher-9-7-ERK':
#
#      A = [z, z, z, z, z, z, z, z, z
#           v(1)/v(6), z, z, z, z, z, z, z, z
#           z, v(1)/v(3), z, z, z, z, z, z, z
#           v(1)/v(8), z, v(3)/v(8), z, z, z, z, z, z
#           v(148)/v(1331), z, v(150)/v(1331), -v(56)/v(1331), z, z, z, z, z
#           -v(404)/v(243), z, -v(170)/v(27), v(4024)/v(1701), v(10648)/v(1701), z, z, z, z
#           v(2466)/v(2401), z, v(1242)/v(343), -v(19176)/v(16807), -v(51909)/v(16807), v(1053)/v(2401), z, z, z
#           v(5)/v(154), z, z, v(96)/v(539), -v(1815)/v(20384), -v(405)/v(2464), v(49)/v(1144), z, z
#           -v(113)/v(32), z, -v(195)/v(22), v(32)/v(7), v(29403)/v(3584), -v(729)/v(512), v(1029)/v(1408), v(21)/v(16), z]
#      b = [z, z, z, v(32)/v(105), v(1771561)/v(6289920), v(243)/v(2560), v(16807)/v(74880), v(77)/v(1440), v(11)/v(270)]
#      c = [z; v(1)/v(6); v(1)/v(3); v(1)/v(2); v(2)/v(11); v(2)/v(3); v(6)/v(7); z; v(1)]
#      q = 7
#      B = [c, A; q, b]
#
#   elif method_name == 'CooperVerner-11-8-ERK':
#
#      s21 = sqrt(21)
#      A = [z, z, z, z, z, z, z, z, z, z, z
#           v(1)/v(2), z, z, z, z, z, z, z, z, z, z
#           v(1)/v(4), v(1)/v(4), z, z, z, z, z, z, z, z, z
#           v(1)/v(7), (-v(7)-3*s21)/98, (v(21)+5*s21)/49, z, z, z, z, z, z, z, z
#           (v(11)+s21)/84, z, (v(18)+4*s21)/63, (v(21)-s21)/252, z, z, z, z, z, z, z
#           (v(5)+s21)/48, z, (v(9)+s21)/36, (-v(231)+14*s21)/360, (v(63)-7*s21)/80, z, z, z, z, z, z
#           (v(10)-s21)/42, z, (-v(432)+92*s21)/315, (v(633)-145*s21)/90, (-v(504)+115*s21)/70, (v(63)-13*s21)/35, z, z, z, z, z
#           v(1)/v(14), z, z, z, (v(14)-3*s21)/126, (v(13)-3*s21)/63, v(1)/v(9), z, z, z, z
#           v(1)/v(32), z, z, z, (v(91)-21*s21)/576, v(11)/v(72), (-v(385)-75*s21)/1152, (v(63)+13*s21)/128, z, z, z
#           v(1)/v(14), z, z, z, v(1)/v(9), (-v(733)-147*s21)/2205, (v(515)+111*s21)/504, (-v(51)-11*s21)/56, (v(132)+28*s21)/245, z, z
#           z, z, z, z, (-v(42)+7*s21)/18, (-v(18)+28*s21)/45, (-v(273)-53*s21)/72, (v(301)+53*s21)/72, (v(28)-28*s21)/45, (v(49)-7*s21)/18, z]
#      b = [v(1)/v(20), z, z, z, z, z, z, v(49)/v(180), v(16)/v(45), v(49)/v(180), v(1)/v(20)]
#      c = [z; v(1)/v(2); v(1)/v(2); (v(7)+s21)/14; (v(7)+s21)/14; v(1)/v(2); (v(7)-s21)/14; (v(7)-s21)/14; v(1)/v(2); (v(7)+s21)/14; v(1)]
#      q = 8
#      B = [c, A; q, b]
#
#   elif method_name == 'Merson-4-3-ERK':
#
#      A = [z, z, z, z, z; v(1)/v(3), z, z, z, z; v(1)/v(6), v(1)/v(6), z, z, z; ...
#           v(1)/v(8), z, v(3)/v(8), z, z; v(1)/v(2), z, v(-3)/v(2), v(2), z]
#      b = [v(1)/v(6), z, z, v(2)/v(3), v(1)/v(6)]
#      b2 = [v(1)/v(10), z, v(3)/v(10), v(2)/v(5), v(1)/v(5)]
#      c = [z; v(1)/v(3); v(1)/v(3); v(1)/v(2); v(1)]
#      q = 4
#      p = 3
#      B = [c, A; q, b; p, b2]
#
#   elif method_name == 'Zonneveld-4-3-ERK':
#
#      A = [z, z, z, z, z; v(1)/v(2), z, z, z, z; z, v(1)/v(2), z, z, z; ...
#           z, z, v(1), z, z; v(5)/v(32), v(7)/v(32), v(13)/v(32), v(-1)/v(32), z]
#      b = [v(1)/v(6), v(1)/v(3), v(1)/v(3), v(1)/v(6), z]
#      b2 = [v(-1)/v(2), v(7)/v(3), v(7)/v(3), v(13)/v(6), v(-16)/v(3)]
#      c = [z; v(1)/v(2); v(1)/v(2); v(1); v(3)/v(4)]
#      q = 4
#      p = 3
#      B = [c, A; q, b; p, b2]
#
#
#   elif method_name == 'Verner-6-5-ERK':
#
#      A = [z, z, z, z, z, z, z, z; ...
#           v(1)/v(6), z, z, z, z, z, z, z; ...
#           v(4)/v(75), v(16)/v(75), z, z, z, z, z, z; ...
#           v(5)/v(6), v(-8)/v(3), v(5)/v(2), z, z, z, z, z; ...
#           v(-165)/v(64), v(55)/v(6), v(-425)/v(64), v(85)/v(96), z, z, z, z; ...
#           v(12)/v(5), v(-8), v(4015)/v(612), v(-11)/v(36), v(88)/v(255), z, z, z; ...
#           v(-8263)/v(15000), v(124)/v(75), v(-643)/v(680), v(-81)/v(250), v(2484)/v(10625), z, z, z; ...
#           v(3501)/v(1720), v(-300)/v(43), v(297275)/v(52632), v(-319)/v(2322), v(24068)/v(84065), z, v(3850)/v(26703), z]
#      b = [v(3)/v(40), z, v(875)/v(2244), v(23)/v(72), v(264)/v(1955), z, v(125)/v(11592), v(43)/v(616)]
#      b2 = [v(13)/v(160), z, v(2375)/v(5984), v(5)/v(16), v(12)/v(85), v(3)/v(44), z, z]
#
#      c = [z; v(1)/v(6); v(4)/v(15); v(2)/v(3); v(5)/v(6); v(1); v(1)/v(15); v(1)]
#      q = 6
#      p = 5
#      B = [c, A; q, b; p, b2]
#
#   elif method_name == 'Fehlberg-8-7-ERK':
#
#      A = [z, z, z, z, z, z, z, z, z, z, z, z, z; ...
#           v(2)/v(27), z, z, z, z, z, z, z, z, z, z, z, z; ...
#           v(1)/v(36), v(1)/v(12), z, z, z, z, z, z, z, z, z, z, z; ...
#           v(1)/v(24), z, v(1)/v(8), z, z, z, z, z, z, z, z, z, z; ...
#           v(5)/v(12), z, v(-25)/v(16), v(25)/v(16), z, z, z, z, z, z, z, z, z; ...
#           v(1)/v(20), z, z, v(1)/v(4), v(1)/v(5), z, z, z, z, z, z, z, z; ...
#           v(-25)/v(108), z, z, v(125)/v(108), v(-65)/v(27), v(125)/v(54), z, z, z, z, z, z, z; ...
#           v(31)/v(300), z, z, z, v(61)/v(225), v(-2)/v(9), v(13)/v(900), z, z, z, z, z, z; ...
#           v(2), z, z, v(-53)/v(6), v(704)/v(45), v(-107)/v(9), v(67)/v(90), v(3), z, z, z, z, z; ...
#           v(-91)/v(108), z, z, v(23)/v(108), v(-976)/v(135), v(311)/v(54), v(-19)/v(60), v(17)/v(6), v(-1)/v(12), z, z, z, z; ...
#           v(2383)/v(4100), z, z, v(-341)/v(164), v(4496)/v(1025), v(-301)/v(82), v(2133)/v(4100), v(45)/v(82), v(45)/v(164), v(18)/v(41), z, z, z; ...
#           v(3)/v(205), z, z, z, z, v(-6)/v(41), v(-3)/v(205), v(-3)/v(41), v(3)/v(41), v(6)/v(41), z, z, z; ...
#           v(-1777)/v(4100), z, z, v(-341)/v(164), v(4496)/v(1025), v(-289)/v(82), v(2193)/v(4100), v(51)/v(82), v(33)/v(164), v(12)/v(41), z, v(1), z]
#      b = [z, z, z, z, z, v(34)/v(105), v(9)/v(35), v(9)/v(35), v(9)/v(280), v(9)/v(280), z, v(41)/v(840), v(41)/v(840)]
#      b2 = [v(41)/v(840), z, z, z, z, v(34)/v(105), v(9)/v(35), v(9)/v(35), v(9)/v(280), v(9)/v(280), v(41)/v(840), z, z]
#
#      c = [z; v(2)/v(27); v(1)/v(9); v(1)/v(6); v(5)/v(12); v(1)/v(2); v(5)/v(6); v(1)/v(6); v(2)/v(3); v(1)/v(3); v(1); z; v(1)]
#      q = 8
#      p = 7
#      B = [c, A; q, b; p, b2]
#
#   elif method_name == 'SDIRK-2-2':
#
#      A = [v(1)-v(1)/sqrt(v(2)), z; v(1)/sqrt(v(2)), v(1)-v(1)/sqrt(v(2))]
#      b = [ v(1)/sqrt(v(2)), v(1) - v(1)/sqrt(v(2))]
#      c = [ v(1)-v(1)/sqrt(v(2)); v(1)]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'SDIRK-2-1':
#
#      A = [v(1), z; v(-1), v(1)]
#      b = [ v(1)/v(2), v(1)/v(2)]
#      b2 = [ v(1), z]
#      c = [ v(1); z]
#      q = 2
#      p = 1
#      B = [c, A; q, b; p, b2]
#
#   elif method_name == 'IRK-1-1':
#
#      c = [v(1)]
#      b = [v(1)]
#      A = [v(1)]
#      q = 1
#      B = [c, A; q, b]
#
#   elif method_name == 'Crank-Nicolson-2-2-IRK':
#
#      A = [ v(1)/v(2), v(1)/v(2); z, z]
#      b = [ v(1)/v(2), v(1)/v(2)]
#      c = [ v(1); z]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'SIRK-2-2':
#
#      A = [(v(5)-v(3)*sqrt(v(2)))/v(4), (v(7)-v(5)*sqrt(v(2)))/v(4); ...
#           (v(1)+v(1)*sqrt(v(2)))/v(4), (v(3)-v(1)*sqrt(v(2)))/v(4)]
#      b = [ (v(1)+v(1)*sqrt(v(2)))/v(4), (v(3)-v(1)*sqrt(v(2)))/v(4)]
#      c = [ v(3)-v(2)*sqrt(v(2)); v(1)]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'Gauss-2-4-IRK':
#
#      A = [v(1)/v(4), v(1)/v(4)-sqrt(v(3))/v(6); v(1)/v(4)+sqrt(v(3))/v(6), v(1)/v(4)]
#      b = [v(1)/v(2), v(1)/v(2)]
#      c = [v(1)/v(2)-sqrt(v(3))/v(6); v(1)/v(2)+sqrt(v(3))/v(6)]
#      q = 4
#      B = [c, A; q, b]
#
#   elif method_name == 'RadauIIA-2-3-IRK':
#
#      A = [v(5)/v(12), v(-1)/v(12); v(9)/v(12), v(3)/v(12)]
#      b = [v(3)/v(4), v(1)/v(4)]
#      c = [v(1)/v(3); v(1)]
#      q = 3
#      B = [c, A; q, b]
#
#   elif method_name == 'LobattoIII-2-2-IRK':
#
#      A = [z, z; v(1), z]
#      b = [v(1)/v(2), v(1)/v(2)]
#      c = [z; v(1)]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'LobattoIIIA-2-2-IRK':
#
#      A = [ z, z; v(1)/v(2), v(1)/v(2)]
#      b = [ v(1)/v(2), v(1)/v(2)]
#      c = [ z; v(1)]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'LobattoIIIC-2-2-IRK':
#
#      A = [ v(1)/v(2), v(-1)/v(2); v(1)/v(2), v(1)/v(2)]
#      b = [ v(1)/v(2), v(1)/v(2)]
#      c = [ z; v(1)]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'Gauss-3-6-IRK':
#
#      A = [v(5)/v(36), v(2)/v(9)-sqrt(v(15))/v(15), v(5)/v(36)-sqrt(v(15))/v(30); ...
#         v(5)/v(36)+sqrt(v(15))/v(24), v(2)/v(9), v(5)/v(36)-sqrt(v(15))/v(24); ...
#         v(5)/v(36)+sqrt(v(15))/v(30), v(2)/v(9)+sqrt(v(15))/v(15), v(5)/v(36)]
#      c = [v(0.5)-sqrt(v(15))/v(10); v(0.5); v(0.5)+sqrt(v(15))/v(10)]
#      b = [v(5)/v(18), v(8)/v(18), v(5)/v(18)]
#      q = 6
#      B = [c, A; q, b]
#
#   elif method_name == 'RadauI-3-5-IRK':
#
#      A = [z, z, z; ...
#         (v(9)+sqrt(v(6)))/v(75), (v(24)+sqrt(v(6)))/v(120), (v(168)-v(73)*sqrt(v(6)))/v(600); ...
#         (v(9)-sqrt(v(6)))/v(75), (v(168)+v(73)*sqrt(v(6)))/v(600), (v(24)-sqrt(v(6)))/v(120)]
#      b = [v(1)/v(9), (v(16)+sqrt(v(6)))/v(36), (v(16)-sqrt(v(6)))/v(36)]
#      c = [z; (v(6)-sqrt(v(6)))/v(10); (v(6)+sqrt(v(6)))/v(10)]
#      q = 5
#      B = [c, A; q, b]
#
#   elif method_name == 'RadauIA-3-5-IRK':
#
#      A = [v(1)/v(9), -(v(1)+sqrt(v(6)))/v(18), -(v(1)-sqrt(v(6)))/v(18); ...
#         v(1)/v(9), (v(88)+v(7)*sqrt(v(6)))/v(360), (v(88)-v(43)*sqrt(v(6)))/v(360); ...
#         v(1)/v(9), (v(88)+v(43)*sqrt(v(6)))/v(360), (v(88)-v(7)*sqrt(v(6)))/v(360)]
#      b = [v(1)/v(9), (v(16)+sqrt(v(6)))/v(36), (v(16)-sqrt(v(6)))/v(36)]
#      c = [z; (v(6)-sqrt(v(6)))/v(10); (v(6)+sqrt(v(6)))/v(10)]
#      q = 5
#      B = [c, A; q, b]
#
#   elif method_name == 'RadauII-3-5-IRK':
#
#      A = [(v(24)-sqrt(v(6)))/v(120), (v(24)-v(11)*sqrt(v(6)))/v(120), z; ...
#         (v(24)+v(11)*sqrt(v(6)))/v(120), (v(24)+sqrt(v(6)))/v(120), z; ...
#         (v(6)-sqrt(v(6)))/v(12), (v(6)+sqrt(v(6)))/v(12), z]
#      b = [(v(16)-sqrt(v(6)))/v(36), (v(16)+sqrt(v(6)))/v(36), v(1)/v(9)]
#      c = [(v(4)-sqrt(v(6)))/v(10); (v(4)+sqrt(v(6)))/v(10); v(1)]
#      q = 5
#      B = [c, A; q, b]
#
#   elif method_name == 'RadauIIA-3-5-IRK':
#
#      A = [(v(88)-v(7)*sqrt(v(6)))/v(360), (v(296)-v(169)*sqrt(v(6)))/v(1800), (-v(2)+v(3)*sqrt(v(6)))/v(225); ...
#         (v(296)+v(169)*sqrt(v(6)))/v(1800), (v(88)+v(7)*sqrt(v(6)))/v(360), (-v(2)-v(3)*sqrt(v(6)))/v(225); ...
#         (v(16)-sqrt(v(6)))/v(36), (v(16)+sqrt(v(6)))/v(36), v(1)/v(9)]
#      b = [(v(16)-sqrt(v(6)))/v(36), (v(16)+sqrt(v(6)))/v(36), v(1)/v(9)]
#      c = [(v(4)-sqrt(v(6)))/v(10); (v(4)+sqrt(v(6)))/v(10); v(1)]
#      q = 5
#      B = [c, A; q, b]
#
#   elif method_name == 'LobattoIII-3-4-IRK':
#
#      A = [z, z, z; v(1)/v(4), v(1)/v(4), z; z, v(1), z]
#      b = [v(1)/v(6), v(2)/v(3), v(1)/v(6)]
#      c = [z; v(0.5); v(1)]
#      q = 4
#      B = [c, A; q, b]
#
#   elif method_name == 'LobattoIIIA-3-4-IRK':
#
#      A = [ z, z, z; v(5)/v(24), v(1)/v(3), v(-1)/v(24); v(1)/v(6), v(2)/v(3), v(1)/v(6)]
#      b = [ v(1)/v(6), v(2)/v(3), v(1)/v(6)]
#      c = [ z; v(1)/v(2); v(1)]
#      q = 4
#      B = [c, A; q, b]
#
#   elif method_name == 'LobattoIIIB-3-4-IRK':
#
#      A = [ v(1)/v(6), v(-1)/v(6), z; v(1)/v(6), v(1)/v(3), z; v(1)/v(6), v(5)/v(6), z]
#      b = [ v(1)/v(6), v(2)/v(3), v(1)/v(6)]
#      c = [ z; v(1)/v(2); v(1)]
#      q = 4
#      B = [c, A; q, b]
#
#   elif method_name == 'LobattoIIIC-3-4-IRK':
#
#      A = [ v(1)/v(6), v(-1)/v(3), v(1)/v(6); v(1)/v(6), v(5)/v(12), v(-1)/v(12); v(1)/v(6), v(2)/v(3), v(1)/v(6)]
#      b = [ v(1)/v(6), v(2)/v(3), v(1)/v(6)]
#      c = [ z; v(1)/v(2); v(1)]
#      q = 4
#      B = [c, A; q, b]
#
#   elif method_name == 'LobattoIII-4-6-IRK':
#
#      A = [z, z, z, z; ...
#         (v(5)+sqrt(v(5)))/v(60), v(1)/v(6), (v(15)-v(7)*sqrt(v(5)))/v(60), z; ...
#         (v(5)-sqrt(v(5)))/v(60), (v(15)+v(7)*sqrt(v(5)))/v(60), v(1)/v(6), z; ...
#         v(1)/v(6), (v(5)-sqrt(v(5)))/v(12), (v(5)+sqrt(v(5)))/v(12), z]
#      b = [v(1)/v(12), v(5)/v(12), v(5)/v(12), v(1)/v(12)]
#      c = [z; (v(5)-sqrt(v(5)))/v(10); (v(5)+sqrt(v(5)))/v(10); v(1)]
#      q = 6
#      B = [c, A; q, b]
#
#   elif method_name == 'LobattoIIIA-4-6-IRK':
#
#      A = [z, z, z, z; ...
#         (v(11)+sqrt(v(5)))/v(120), (v(25)-sqrt(v(5)))/v(120), (v(25)-v(13)*sqrt(v(5)))/v(120), (-v(1)+sqrt(v(5)))/v(120); ...
#         (v(11)-sqrt(v(5)))/v(120), (v(25)+v(13)*sqrt(v(5)))/v(120), (v(25)+sqrt(v(5)))/v(120), (-v(1)-sqrt(v(5)))/v(120); ...
#         v(1)/v(12), v(5)/v(12), v(5)/v(12), v(1)/v(12)]
#      b = [v(1)/v(12), v(5)/v(12), v(5)/v(12), v(1)/v(12)]
#      c = [z; (v(5)-sqrt(v(5)))/v(10); (v(5)+sqrt(v(5)))/v(10); v(1)]
#      q = 6
#      B = [c, A; q, b]
#
#   elif method_name == 'LobattoIIIB-4-6-IRK':
#
#      A = [v(1)/v(12), (-v(1)-sqrt(v(5)))/v(24), (-v(1)+sqrt(v(5)))/v(24), z; ...
#         v(1)/v(12), (v(25)+sqrt(v(5)))/v(120), (v(25)-v(13)*sqrt(v(5)))/v(120), z; ...
#         v(1)/v(12), (v(25)+v(13)*sqrt(v(5)))/v(120), (v(25)-sqrt(v(5)))/v(120), z; ...
#         v(1)/v(12), (v(11)-sqrt(v(5)))/v(24), (v(11)+sqrt(v(5)))/v(24), z]
#      b = [v(1)/v(12), v(5)/v(12), v(5)/v(12), v(1)/v(12)]
#      c = [z; (v(5)-sqrt(v(5)))/v(10); (v(5)+sqrt(v(5)))/v(10); v(1)]
#      q = 6
#      B = [c, A; q, b]
#
#   elif method_name == 'LobattoIIIC-4-6-IRK':
#
#      A = [v(1)/v(12), -sqrt(v(5))/v(12), sqrt(v(5))/v(12), -v(1)/v(12); ...
#         v(1)/v(12), v(1)/v(4), (v(10)-v(7)*sqrt(v(5)))/v(60), sqrt(v(5))/v(60); ...
#         v(1)/v(12), (v(10)+v(7)*sqrt(v(5)))/v(60), v(1)/v(4), -sqrt(v(5))/v(60); ...
#         v(1)/v(12), v(5)/v(12), v(5)/v(12), v(1)/v(12)]
#      b = [v(1)/v(12), v(5)/v(12), v(5)/v(12), v(1)/v(12)]
#      c = [z; (v(5)-sqrt(v(5)))/v(10); (v(5)+sqrt(v(5)))/v(10); v(1)]
#      q = 6
#      B = [c, A; q, b]
#
#   elif method_name == 'RadauIIA-5-9-IRK':
#
#      A = [v(0.07299886431790337), v(-0.02673533110794565), v(0.01867692976398445), ...
#             v(-0.01287910609330652), v(0.005042839233882052)
#         v(0.1537752314791824), v(0.1462148678474935), v(-0.03644456890512816), ...
#             v(0.02123306311930480), v(-0.007935579902728813)
#         v(0.1400630456848099), v(0.2989671294912833), v(0.1675850701352492), ...
#             v(-0.03396910168661794), v(0.01094428874419233)
#         v(0.1448943081095342), v(0.2765000687601608), v(0.3257979229104191), ...
#             v(0.1287567532549115), v(-0.01570891737880607)
#         v(0.1437135607912259), v(0.2813560151494621), v(0.3118265229757413), ...
#             v(0.2231039010835707), v(0.04)]
#      b = [v(0.1437135607912259), v(0.2813560151494621), v(0.3118265229757413), ...
#         v(0.2231039010835707), v(0.04)]
#      c = [v(0.05710419611451768); v(0.2768430136381238); v(0.5835904323689168); ...
#         v(0.8602401356562195); v(1)]
#      q = 9
#      B = [c, A; q, b]
#
#   elif method_name == 'LobattoIII-5-8-IRK':
#
#      A = [z, z, z, z, z; ...
#         v(1)/v(14), v(1)/v(9), (v(13)-v(3)*sqrt(v(21)))/v(63), (v(14)-v(3)*sqrt(v(21)))/v(126), z; ...
#         v(1)/v(32), (v(91)+v(21)*sqrt(v(21)))/v(576), v(11)/v(72), (v(91)-v(21)*sqrt(v(21)))/v(576), z; ...
#         v(1)/v(14), (v(14)+v(3)*sqrt(v(21)))/v(126), (v(13)+v(3)*sqrt(v(21)))/v(63), v(1)/v(9), z; ...
#         z, v(7)/v(18), v(2)/v(9), v(7)/v(18), z]
#      b = [v(1)/v(20), v(49)/v(180), v(16)/v(45), v(49)/v(180), v(1)/v(20)]
#      c = [z; (v(7)-sqrt(v(21)))/v(14); v(1)/v(2); (v(7)+sqrt(v(21)))/v(14); v(1)]
#      q = 8
#      B = [c, A; q, b]
#
#   elif method_name == 'LobattoIIIA-5-8-IRK':
#
#      A = [z, z, z, z, z; ...
#         (v(119)+v(3)*sqrt(v(21)))/v(1960), (v(343)-v(9)*sqrt(v(21)))/v(2520), (v(392)-v(96)*sqrt(v(21)))/v(2205), (v(343)-v(69)*sqrt(v(21)))/v(2520), (-v(21)+v(3)*sqrt(v(21)))/v(1960); ...
#         v(13)/v(320), (v(392)+v(105)*sqrt(v(21)))/v(2880), v(8)/v(45), (v(392)-v(105)*sqrt(v(21)))/v(2880), v(3)/v(320); ...
#         (v(119)-v(3)*sqrt(v(21)))/v(1960), (v(343)+v(69)*sqrt(v(21)))/v(2520), (v(392)+v(96)*sqrt(v(21)))/v(2205), (v(343)+v(9)*sqrt(v(21)))/v(2520), (-v(21)-v(3)*sqrt(v(21)))/v(1960); ...
#         v(1)/v(20), v(49)/v(180), v(16)/v(45), v(49)/v(180), v(1)/v(20)]
#      b = [v(1)/v(20), v(49)/v(180), v(16)/v(45), v(49)/v(180), v(1)/v(20)]
#      c = [z; (v(7)-sqrt(v(21)))/v(14); v(1)/v(2); (v(7)+sqrt(v(21)))/v(14); v(1)]
#      q = 8
#      B = [c, A; q, b]
#
#   elif method_name == 'LobattoIIIB-5-8-IRK':
#
#      A = [v(1)/v(20), (-v(7)-sqrt(v(21)))/v(120), v(1)/v(15), (-v(7)+sqrt(v(21)))/v(120), z; ...
#         v(1)/v(20), (v(343)+v(9)*sqrt(v(21)))/v(2520), (v(56)-v(15)*sqrt(v(21)))/v(315), (v(343)-v(69)*sqrt(v(21)))/v(2520), z; ...
#         v(1)/v(20), (v(49)+v(12)*sqrt(v(21)))/v(360), v(8)/v(45), (v(49)-v(12)*sqrt(v(21)))/v(360), z; ...
#         v(1)/v(20), (v(343)+v(69)*sqrt(v(21)))/v(2520), (v(56)+v(15)*sqrt(v(21)))/v(315), (v(343)-v(9)*sqrt(v(21)))/v(2520), z; ...
#         v(1)/v(20), (v(119)-v(3)*sqrt(v(21)))/v(360), v(13)/v(45), (v(119)+v(3)*sqrt(v(21)))/v(360), z]
#      b = [v(1)/v(20), v(49)/v(180), v(16)/v(45), v(49)/v(180), v(1)/v(20)]
#      c = [z; (v(7)-sqrt(v(21)))/v(14); v(1)/v(2); (v(7)+sqrt(v(21)))/v(14); v(1)]
#      q = 8
#      B = [c, A; q, b]
#
#   elif method_name == 'LobattoIIIC-5-8-IRK':
#
#      A = [v(1)/v(20), v(-7)/v(60), v(2)/v(15), v(-7)/v(60), v(1)/v(20); ...
#         v(1)/v(20), v(29)/v(180), (v(47)-v(15)*sqrt(v(21)))/v(315), (v(203)-v(30)*sqrt(v(21)))/v(1260), -v(3)/v(140); ...
#         v(1)/v(20), (v(329)+v(105)*sqrt(v(21)))/v(2880), v(73)/v(360), (v(329)-v(105)*sqrt(v(21)))/v(2880), v(3)/v(160); ...
#         v(1)/v(20), (v(203)+v(30)*sqrt(v(21)))/v(1260), (v(47)+v(15)*sqrt(v(21)))/v(315), v(29)/v(180), v(-3)/v(140); ...
#         v(1)/v(20), v(49)/v(180), v(16)/v(45), v(49)/v(180), v(1)/v(20)]
#      b = [v(1)/v(20), v(49)/v(180), v(16)/v(45), v(49)/v(180), v(1)/v(20)]
#      c = [z; (v(7)-sqrt(v(21)))/v(14); v(1)/v(2); (v(7)+sqrt(v(21)))/v(14); v(1)]
#      q = 8
#      B = [c, A; q, b]
#
#   elif method_name == 'SDIRK-5-4':
#
#      A = [v(1)/v(4), z, z, z, z; ...
#         v(1)/v(2), v(1)/v(4), z, z, z; ...
#         v(17)/v(50), v(-1)/v(25), v(1)/v(4), z, z; ...
#         v(371)/v(1360), v(-137)/v(2720), v(15)/v(544), v(1)/v(4), z; ...
#         v(25)/v(24), v(-49)/v(48), v(125)/v(16), v(-85)/v(12), v(1)/v(4)]
#      b = [v(25)/v(24), v(-49)/v(48), v(125)/v(16), v(-85)/v(12), v(1)/v(4)]
#      c = [v(1)/v(4); v(3)/v(4); v(11)/v(20); v(1)/v(2); v(1)]
#      b2 = [v(59)/v(48), v(-17)/v(96), v(225)/v(32), v(-85)/v(12), z]
#      q = 4
#      p = 3
#      B = [c, A; q, b; p, b2]
#
#   elif method_name == 'Gauss-6-12-IRK':
#
#      A = [v(0.042831123094792580851996218950605), v(-0.014763725997197424643891429014278),  ...
#             v(0.0093250507064777618411400734121424), v(-0.0056688580494835162182488917046817), ...
#             v(0.0028544333150993149102007359161104), v(-0.00081278017126476782600392067714199); ...
#         v(0.092673491430378856970823740288243),  v(0.090190393262034655662118827897123),  ...
#             v(-0.020300102293239581308124404430781),  v(0.010363156240246421640614877198502),  ...
#             v(-0.0048871929280376802268550750181669), v(0.001355561055485051944941864725486);  ...
#         v(0.082247922612843859526233540856659),  v(0.19603216233324501065540377853111),   ...
#             v(0.11697848364317276194496135254516),  v(-0.020482527745656096032756375665715),  ...
#             v(0.007989991899662334513029865501749), v(-0.0020756257848663355105554732114538); ...
#         v(0.087737871974451497214547911112663),  v(0.1723907946244069768112077902925),    ...
#             v(0.25443949503200161992267908075603),   v(0.11697848364317276194496135254516),   ...
#             v(-0.015651375809175699331166122736864),  v(0.00341432357674130217775889704455);   ...
#         v(0.084306685134100109759050573175723),  v(0.18526797945210699155109273081241),   ...
#             v(0.22359381104609910224930782789182),   v(0.2542570695795851051980471095211),    ...
#             v(0.090190393262034655662118827897123), v(-0.007011245240793695266831302387034);  ...
#         v(0.086475026360849929529996358578351),  v(0.17752635320896999641403691987814),   ...
#             v(0.239625825335829040108171596795),     v(0.22463191657986776204878263167818),   ...
#             v(0.19514451252126673596812908480852),   v(0.042831123094792580851996218950605)]
#      b = [v(0.085662246189585161703992437901209), v(0.18038078652406931132423765579425), ...
#         v(0.23395696728634552388992270509032), v(0.23395696728634552388992270509032), ...
#         v(0.18038078652406931132423765579425), v(0.085662246189585161703992437901209)]
#      c = [v(0.0337652428984239749709672651079); v(0.16939530676686775922945571437594)
#         v(0.38069040695840154764351126459587); v(0.61930959304159845235648873540413)
#         v(0.83060469323313224077054428562406); v(0.9662347571015760250290327348921)]
#      q = 12
#      B = [c, A; q, b]
#
#   elif method_name == 'ARK(2,3,2)-ERK':
#
#      gamma = v(1) - v(1)/sqrt(v(2))
#      alpha = v(1)/v(6) * (v(3)+v(2)*sqrt(v(2)))
#      delta = v(1)/(v(2)*sqrt(v(2)))
#      twogamma = v(2) * gamma
#
#      A = [z,         z,     z; ...
#           twogamma,  z,     z; ...
#           v(1) - alpha, alpha, z]
#      b = [delta, delta, gamma]
#      c = [z; twogamma; v(1)]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'ARK(2,3,2)-SDIRK':
#
#      gamma = v(1) - v(1)/sqrt(v(2))
#      alpha = v(1)/v(6) * (v(3)+v(2)*sqrt(v(2)))
#      delta = v(1)/(v(2)*sqrt(v(2)))
#      twogamma = v(2) * gamma
#
#      A = [z,     z,     z; ...
#           gamma, gamma, z; ...
#           delta, delta, gamma]
#      b = [delta, delta, gamma]
#      c = [z; twogamma; v(1)]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'SSP2(2,2,2)-ERK':
#
#      A = [z, z; ...
#           v(1), z]
#      b = [v(1)/v(2), v(1)/v(2)]
#      c = [z; v(1)]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'SSP2(2,2,2)-SDIRK':
#
#      gamma = v(1) - v(1)/sqrt(v(2))
#
#      A = [gamma,       z;...
#           v(1) - v(2)*gamma, gamma]
#      b = [v(1)/v(2), v(1)/v(2)]
#      c = [gamma; v(1) - gamma]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'SSP2(3,3,2)-lpm1-ERK':
#
#      A = [  z,   z, z;...
#           v(1)/v(2),   z, z;...
#           v(1)/v(2), v(1)/v(2), z]
#      b = [v(1)/v(3), v(1)/v(3), v(1)/v(3)]
#      c = [z; v(1)/v(2); v(1)]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'SSP2(3,3,2)-lpm1-SDIRK':
#
#      A = [         v(2)/v(11),    z,    z;...
#               v(2829)/v(9317), v(2)/v(11),    z;...
#           v(148529)/v(428582), v(7)/v(23), v(2)/v(11)]
#      b = [v(1)/v(3), v(1)/v(3), v(1)/v(3)]
#      c = [v(2)/v(11); v(4523)/v(9317); v(15517)/v(18634)]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'SSP2(3,3,2)-lpm2-ERK':
#
#      A = [  z,   z, z;...
#           v(1)/v(2),   z, z;...
#           v(1)/v(2), v(1)/v(2), z]
#      b = [v(1)/v(3), v(1)/v(3), v(1)/v(3)]
#      c = [z; v(1)/v(2); v(1)]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'SSP2(3,3,2)-lpm2-SDIRK':
#
#      A = [        v(2)/v(11),     z,    z;...
#             v(2583)/v(13310),  v(2)/v(11),    z;...
#           v(39731)/v(139755), v(10)/v(21), v(2)/v(11)]
#      b = [v(1)/v(3), v(1)/v(3), v(1)/v(3)]
#      c = [v(2)/v(11); v(5003)/v(13310); v(6271)/v(6655)]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'SSP2(3,3,2)-lpum-ERK':
#
#      A = [  z,   z, z;...
#           v(1)/v(2),   z, z;...
#           v(1)/v(2), v(1)/v(2), z]
#      b = [v(1)/v(3), v(1)/v(3), v(1)/v(3)]
#      c = [z; v(1)/v(2); v(1)]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'SSP2(3,3,2)-lpum-SDIRK':
#
#      A = [        v(2)/v(11),      z,    z;...
#                 v(41)/v(154),   v(2)/v(11),    z;...
#                v(289)/v(847), v(42)/v(121), v(2)/v(11)]
#      b = [v(1)/v(3), v(1)/v(3), v(1)/v(3)]
#      c = [v(2)/v(11); v(69)/v(154); v(67)/v(77)]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'SSP2(3,3,2)-lspum-ERK':
#
#      A = [    z,     z, z;...
#             v(5)/v(6),     z, z;...
#           v(11)/v(24), v(11)/v(24), z]
#      b = [v(24)/v(55), v(1)/v(5), v(4)/v(11)]
#      c = [z; v(5)/v(6); v(11)/v(12)]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'SSP2(3,3,2)-lspum-SDIRK':
#
#      A = [        v(2)/v(11),      z,    z;...
#                v(205)/v(462),   v(2)/v(11),    z;...
#              v(2033)/v(4620), v(21)/v(110), v(2)/v(11)]
#      b = [v(24)/v(55), v(1)/v(5), v(4)/v(11)]
#      c = [v(2)/v(11); v(289)/v(462); v(751)/v(924)]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'SSP2(3,3,2)-a-ERK':
#
#      A = [  z,   z, z;...
#           v(1)/v(2),   z, z;...
#           v(1)/v(2), v(1)/v(2), z]
#      b = [v(1)/v(3), v(1)/v(3), v(1)/v(3)]
#      c = [z; v(1)/v(2); 1.0]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'SSP2(3,3,2)-a-DIRK':
#
#      A = [v(1)/v(4),   z,   z;...
#             z, v(1)/v(4),   z;...
#           v(1)/v(3), v(1)/v(3), v(1)/v(3)]
#      b = [v(1)/v(3), v(1)/v(3), v(1)/v(3)]
#      c = [v(1)/v(4); v(1)/v(4); v(1)]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'SSP2(3,3,2)-b-ERK':
#
#      A = [  z,   z, z;...
#           v(1)/v(2),   z, z;...
#           v(1)/v(2), v(1)/v(2), z]
#      b = [v(1)/v(3), v(1)/v(3), v(1)/v(3)]
#      c = [z; v(1)/v(2); v(1)]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'SSP2(3,3,2)-b-DIRK':
#
#      A = [ v(1)/v(5),   z,   z;...
#           v(1)/v(10), v(1)/v(5),   z;...
#            v(1)/v(3), v(1)/v(3), v(1)/v(3)]
#      b = [v(1)/v(3), v(1)/v(3), v(1)/v(3)]
#      c = [v(1)/v(5); v(3)/v(10); v(1)]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'SSP3(3,3,2)-ERK':
#
#      A = [  z,   z, z;...
#             v(1),   z, z;...
#           v(1)/v(4), v(1)/v(4), z]
#      b = [v(1)/v(6), v(1)/v(6), v(2)/v(3)]
#      c = [z; v(1); v(1)/v(2)]
#      q = 3
#      B = [c, A; q, b]
#
#   elif method_name == 'SSP3(3,3,2)-SDIRK':
#
#      gamma = v(1) - v(1)/sqrt(v(2))
#      A = [      gamma,     z,     z;...
#           v(1) - v(2)*gamma, gamma,     z;...
#           v(1)/v(2) - gamma,     z, gamma]
#      b = [v(1)/v(6), v(1)/v(6), v(2)/v(3)]
#      c = [gamma; v(1)-gamma; v(1)/v(2)]
#      q = 2
#      B = [c, A; q, b]
#
#   elif method_name == 'SSP3(3,3,3)-ERK':
#
#      A = [  z,   z, z;...
#             1,   z, z;...
#           v(1)/v(4), v(1)/v(4), z]
#      b = [v(1)/v(6), v(1)/v(6), v(2)/v(3)]
#      c = [z; v(1); v(1)/v(2)]
#      q = 3
#      B = [c, A; q, b]
#
#   elif method_name == 'SSP3(3,3,3)-ESDIRK':
#
#      A = [    z,    z,    z;...
#           v(14)/v(15), v(1)/v(15),    z;...
#            v(7)/v(30),  v(1)/v(5), v(1)/v(15)]
#      b = [v(1)/v(6), v(1)/v(6), v(2)/v(3)]
#      c = [z; v(1); v(1)/v(2)]
#      q = 3
#      B = [c, A; q, b]
#
#   elif method_name == 'SSP3(4,3,3)-ERK':
#
#      A = [  z,   z,   z, z;...
#             z,   z,   z, z;...
#             z,   v(1),   z, z;...
#             z, v(1)/v(4), v(1)/v(4), z]
#      b = [z, v(1)/v(6), v(1)/v(6), v(2)/v(3)]
#      c = [z;   z;   v(1); v(1)/v(2)]
#      q = 3
#      B = [c, A; q, b]
#
#   elif method_name == 'SSP3(4,3,3)-SDIRK':
#
#      alpha = v(0.24169426078821)
#      beta  = v(0.06042356519705)
#      eta   = v(0.12915286960590)
#      delta = v(0.5) - beta - eta - alpha
#
#      A = [ alpha,       z,     0      z;...
#           -alpha,   alpha,     z,     z;...
#                z, v(1)-alpha, alpha,     z
#             beta,     eta, delta, alpha]
#      b = [z,     v(1)/v(6), v(1)/v(6), v(2)/v(3)]
#      c = [alpha;   z;   v(1); v(1)/v(2)]
#      q = 3
#      B = [c, A; q, b]
#
#   elif method_name == 'SSPRK(3,3)-Shu-Osher-ERK':
#
#      A = [ z,   z,   z;...
#            v(1),   z,   z;...
#            v(1)/v(4), v(1)/v(4), z]
#      b = [ v(1)/v(6), v(1)/v(6), v(2)/v(3)]
#      c = [ z;   v(1);   v(1)/v(2)]
#      q = 3
#      B = [c, A; q, b]
#
#   elif method_name == 'EDIRK-3-3':
#
      # Pairs with SSPRK(3,3)-Shu-Osher-ERK to make 3rd order IMEX method
      #
      # General form (with free parameter beta):
      #
      # gamma = (2*beta^2 - (3/2)*beta + 1/3)/(2-4*beta)
      # A = [ z,              z,                z;...
      #       4*gamma+2*beta, 1-4*gamma-2*beta, z;...
      #       1/2-beta-gamma, gamma,            beta]
#
#      beta  = v(2)/v(3)
#      gamma = -v(1)/v(3)
#
#      A = [ z,   z,    z;...
#            z,   v(1),   z;...
#            v(1)/v(6), v(-1)/v(3), v(2)/v(3)]
#      b = [ v(1)/v(6), v(1)/v(6), v(2)/v(3)]
#      c = [ z;   v(1);   v(1)/v(2)]
#      q = 3
#      B = [c, A; q, b]
#
#   elif method_name == 'ESDIRK-3-3':
#
      # Pairs with SSPRK(3,3)-Shu-Osher-ERK to make 3rd order IMEX method
      #
      # In general gamma = (2*beta^2 - (3/2)*beta + 1/3)/(2-4*beta)
#
#      beta  = sqrt(v(3))/v(6) + v(1)/v(2)
#      gamma = (-v(1)/v(8))*(sqrt(v(3))+v(1))
#
#      A = [ z,              z,                z;...
#            v(4)*gamma+v(2)*beta, v(1)-v(4)*gamma-v(2)*beta, z;...
#            v(1)/v(2)-beta-gamma, gamma,            beta]
#      b = [ v(1)/v(6), v(1)/v(6), v(2)/v(3)]
#      c = [ z;   v(1);   v(1)/v(2)]
#      q = 3
#      B = [c, A; q, b]

   else:

      B = 0
      fprintf('Butcher error, method %s not defined\n',method_name)

   return B

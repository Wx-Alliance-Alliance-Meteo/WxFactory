#!/usr/bin/env python3

""" The WxFactory model """

import argparse
import datetime
import os.path
import sys

from mpi4py import MPI
import numpy

from simulation import Simulation

def main():

   args = None
   rank = MPI.COMM_WORLD.rank

   if rank == 0:
      print(f'Start time : {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')

   parse_error = None
   if rank == 0:
      try:
         parser = argparse.ArgumentParser(description='Solve NWP problems with GEF!')
         parser.add_argument('--profile', action='store_true', help='Produce an execution profile when running')
         parser.add_argument('config', type=str, help='File that contains simulation parameters')
         parser.add_argument('--show-every-crash', action='store_true',
                              help='In case of an exception, show output from alllllll PEs')
         parser.add_argument('--numpy-warn-as-except', action='store_true',
                              help='Raise an exception if there is a numpy warning')

         args = parser.parse_args()
      except SystemExit as e:
         parse_error = e

   parse_error = MPI.COMM_WORLD.bcast(parse_error, root=0)

   if parse_error is not None:
      if rank == 0: raise parse_error
      sys.exit(-1)

   args = MPI.COMM_WORLD.bcast(args, root=0)

   if not os.path.exists(args.config):
      if rank == 0: raise ValueError(f'Config file does not seem valid: {args.config}')
      sys.exit(-1)

   try:
      import cProfile

      # Start profiling
      pr = None
      if args.profile:
         pr = cProfile.Profile()
         pr.enable()

      numpy.set_printoptions(suppress=True, linewidth=256)

      if args.numpy_warn_as_except:
         numpy.seterr(all='raise')

      # Read the config + initialize simulation
      sim = Simulation(args.config)

      # This is the actual run
      sim.run()

      if args.profile and pr:
         pr.disable()

         out_file = f'prof_{rank:04d}.out'
         pr.dump_stats(out_file)

   except (Exception, KeyboardInterrupt):

      sys.stdout.flush()
      if args and args.show_every_crash:
         raise

      if rank == 0:
         print(f'There was an error while running GEF. Only rank 0 is printing the traceback:')
         raise

      sys.exit(-1)


if __name__ == '__main__':
   main()

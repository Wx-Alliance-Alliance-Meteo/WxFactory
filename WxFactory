#!/usr/bin/env python3

""" The WxFactory model """

import argparse
import datetime
import os.path
import sys

from mpi4py import MPI
import numpy


class ConfigOptionsAction(argparse.Action):
    def __init__(self, option_strings, dest, **kwargs):
        super().__init__(option_strings, dest, default=argparse.SUPPRESS, **kwargs)

    def __call__(self, parser, namespace, values, option_string, **kwargs) -> None:
        from common import load_default_schema

        schema = load_default_schema()
        if MPI.COMM_WORLD.rank == 0:
            markdown = values == "md"
            print(f"Config options:\n{schema.to_string(markdown)}")
        parser.exit()


def main():
    """Execute a WxFactory simulation.

    This function drives the program: read and validate command-line options, then create and run a simulation."""

    src_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), "wx_factory")
    sys.path.append(src_dir)

    args = None
    rank = MPI.COMM_WORLD.rank

    # Doing the import here allows to output potential errors from a single PE, making them much easier to deal with.
    try:
        from simulation import Simulation
        import wx_mpi
    except (ImportError, NameError) as e:
        if rank == 0:
            print(e)
            raise
        sys.exit(-1)

    # Only rank 0 parses the arguments
    parse_error = None
    if rank == 0:
        try:
            parser = argparse.ArgumentParser(description="Solve NWP problems with GEF!")
            parser.add_argument("--profile", action="store_true", help="Produce an execution profile when running")
            parser.add_argument("config", type=str, help="File that contains simulation parameters")
            parser.add_argument(
                "--show-every-crash", action="store_true", help="In case of an exception, show output from alllllll PEs"
            )
            parser.add_argument(
                "--numpy-warn-as-except", action="store_true", help="Raise an exception if there is a numpy warning"
            )
            parser.add_argument(
                "--config-options",
                action=ConfigOptionsAction,
                type=str,
                nargs="?",
                help="List all possible configuration options and stop",
            )

            args = parser.parse_args()
        except SystemExit as e:
            parse_error = e

    parse_error = MPI.COMM_WORLD.bcast(parse_error, root=0)

    if parse_error is not None:
        if rank == 0:
            raise parse_error
        sys.exit(-1)

    if rank == 0:
        print(f'Start time : {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')

    args = MPI.COMM_WORLD.bcast(args, root=0)

    # Abort if config file does not exist
    if not os.path.exists(args.config):
        if rank == 0:
            raise ValueError(f"Config file does not seem to exist: {args.config}")
        sys.exit(-1)

    # Read the config
    config_content = wx_mpi.readfile(args.config)
    config_schema_content = wx_mpi.readfile("config/config-format.json")

    try:
        import cProfile

        # Start profiling
        pr = None
        if args.profile:
            pr = cProfile.Profile()
            pr.enable()

        numpy.set_printoptions(suppress=True, linewidth=256)

        if args.numpy_warn_as_except:
            numpy.seterr(all="raise")

        # Initialize simulation
        sim = Simulation(config_content, config_schema_content)

        # This is the actual run
        sim.run()

        # Stop profiling and store result to disk
        if args.profile and pr:
            pr.disable()

            out_file = f"prof_{rank:04d}.out"
            pr.dump_stats(out_file)

    except (Exception, KeyboardInterrupt):  # KeyboardInterrupt does not seem to be caught with just "Exception"...

        sys.stdout.flush()
        if args and args.show_every_crash:
            raise

        if rank == 0:
            print(f"There was an error while running GEF. Only rank 0 is printing the traceback:")
            raise

        sys.exit(-1)


if __name__ == "__main__":
    main()
